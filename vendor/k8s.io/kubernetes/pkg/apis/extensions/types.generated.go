/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.LabelSelector
		var v3 pkg3_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = x.Selector != nil
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				yynn31 = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yy39.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy40 := &x.ObjectMeta
					yy40.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[3] {
					yy42 := &x.Spec
					yy42.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.Spec
					yy43.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[4] {
					yy45 := &x.Status
					yy45.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy46 := &x.Status
					yy46.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym47 := z.DecBinary()
	_ = yym47
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct48 := r.ContainerType()
		if yyct48 == codecSelferValueTypeMap1234 {
			yyl48 := r.ReadMapStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl48, d)
			}
		} else if yyct48 == codecSelferValueTypeArray1234 {
			yyl48 := r.ReadArrayStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl48, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys49Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys49Slc
	var yyhl49 bool = l >= 0
	for yyj49 := 0; ; yyj49++ {
		if yyhl49 {
			if yyj49 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys49Slc = r.DecodeBytes(yys49Slc, true, true)
		yys49 := string(yys49Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys49 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv52 := &x.ObjectMeta
				yyv52.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv53 := &x.Spec
				yyv53.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv54 := &x.Status
				yyv54.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys49)
		} // end switch yys49
	} // end for yyj49
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj55 int
	var yyb55 bool
	var yyhl55 bool = l >= 0
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv58 := &x.ObjectMeta
		yyv58.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv59 := &x.Spec
		yyv59.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv60 := &x.Status
		yyv60.CodecDecodeSelf(d)
	}
	for {
		yyj55++
		if yyhl55 {
			yyb55 = yyj55 > l
		} else {
			yyb55 = r.CheckBreak()
		}
		if yyb55 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj55-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym61 := z.EncBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep62 := !z.EncBinary()
			yy2arr62 := z.EncBasicHandle().StructToArray
			var yyq62 [2]bool
			_, _, _ = yysep62, yyq62, yy2arr62
			const yyr62 bool = false
			yyq62[0] = x.Kind != ""
			yyq62[1] = x.APIVersion != ""
			var yynn62 int
			if yyr62 || yy2arr62 {
				r.EncodeArrayStart(2)
			} else {
				yynn62 = 0
				for _, b := range yyq62 {
					if b {
						yynn62++
					}
				}
				r.EncodeMapStart(yynn62)
				yynn62 = 0
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[0] {
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym65 := z.EncBinary()
					_ = yym65
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[1] {
					yym67 := z.EncBinary()
					_ = yym67
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym69 := z.DecBinary()
	_ = yym69
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct70 := r.ContainerType()
		if yyct70 == codecSelferValueTypeMap1234 {
			yyl70 := r.ReadMapStart()
			if yyl70 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl70, d)
			}
		} else if yyct70 == codecSelferValueTypeArray1234 {
			yyl70 := r.ReadArrayStart()
			if yyl70 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl70, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys71Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys71Slc
	var yyhl71 bool = l >= 0
	for yyj71 := 0; ; yyj71++ {
		if yyhl71 {
			if yyj71 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys71Slc = r.DecodeBytes(yys71Slc, true, true)
		yys71 := string(yys71Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys71 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys71)
		} // end switch yys71
	} // end for yyj71
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj74 int
	var yyb74 bool
	var yyhl74 bool = l >= 0
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj74++
		if yyhl74 {
			yyb74 = yyj74 > l
		} else {
			yyb74 = r.CheckBreak()
		}
		if yyb74 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj74-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym77 := z.EncBinary()
		_ = yym77
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep78 := !z.EncBinary()
			yy2arr78 := z.EncBasicHandle().StructToArray
			var yyq78 [2]bool
			_, _, _ = yysep78, yyq78, yy2arr78
			const yyr78 bool = false
			var yynn78 int
			if yyr78 || yy2arr78 {
				r.EncodeArrayStart(2)
			} else {
				yynn78 = 2
				for _, b := range yyq78 {
					if b {
						yynn78++
					}
				}
				r.EncodeMapStart(yynn78)
				yynn78 = 0
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym80 := z.EncBinary()
				_ = yym80
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym81 := z.EncBinary()
				_ = yym81
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy83 := &x.TargetValue
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else if z.HasExtensions() && z.EncExt(yy83) {
				} else if !yym84 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy83)
				} else {
					z.EncFallback(yy83)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy85 := &x.TargetValue
				yym86 := z.EncBinary()
				_ = yym86
				if false {
				} else if z.HasExtensions() && z.EncExt(yy85) {
				} else if !yym86 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy85)
				} else {
					z.EncFallback(yy85)
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym87 := z.DecBinary()
	_ = yym87
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct88 := r.ContainerType()
		if yyct88 == codecSelferValueTypeMap1234 {
			yyl88 := r.ReadMapStart()
			if yyl88 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl88, d)
			}
		} else if yyct88 == codecSelferValueTypeArray1234 {
			yyl88 := r.ReadArrayStart()
			if yyl88 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl88, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys89Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys89Slc
	var yyhl89 bool = l >= 0
	for yyj89 := 0; ; yyj89++ {
		if yyhl89 {
			if yyj89 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys89Slc = r.DecodeBytes(yys89Slc, true, true)
		yys89 := string(yys89Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys89 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv91 := &x.TargetValue
				yym92 := z.DecBinary()
				_ = yym92
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv91) {
				} else if !yym92 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv91)
				} else {
					z.DecFallback(yyv91, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys89)
		} // end switch yys89
	} // end for yyj89
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj93 int
	var yyb93 bool
	var yyhl93 bool = l >= 0
	yyj93++
	if yyhl93 {
		yyb93 = yyj93 > l
	} else {
		yyb93 = r.CheckBreak()
	}
	if yyb93 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj93++
	if yyhl93 {
		yyb93 = yyj93 > l
	} else {
		yyb93 = r.CheckBreak()
	}
	if yyb93 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv95 := &x.TargetValue
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv95) {
		} else if !yym96 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv95)
		} else {
			z.DecFallback(yyv95, false)
		}
	}
	for {
		yyj93++
		if yyhl93 {
			yyb93 = yyj93 > l
		} else {
			yyb93 = r.CheckBreak()
		}
		if yyb93 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj93-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym97 := z.EncBinary()
		_ = yym97
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep98 := !z.EncBinary()
			yy2arr98 := z.EncBasicHandle().StructToArray
			var yyq98 [1]bool
			_, _, _ = yysep98, yyq98, yy2arr98
			const yyr98 bool = false
			var yynn98 int
			if yyr98 || yy2arr98 {
				r.EncodeArrayStart(1)
			} else {
				yynn98 = 1
				for _, b := range yyq98 {
					if b {
						yynn98++
					}
				}
				r.EncodeMapStart(yynn98)
				yynn98 = 0
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym100 := z.EncBinary()
					_ = yym100
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym101 := z.EncBinary()
					_ = yym101
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct103 := r.ContainerType()
		if yyct103 == codecSelferValueTypeMap1234 {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if yyct103 == codecSelferValueTypeArray1234 {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys104 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv105 := &x.Items
				yym106 := z.DecBinary()
				_ = yym106
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv105), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj107 int
	var yyb107 bool
	var yyhl107 bool = l >= 0
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv108 := &x.Items
		yym109 := z.DecBinary()
		_ = yym109
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv108), d)
		}
	}
	for {
		yyj107++
		if yyhl107 {
			yyb107 = yyj107 > l
		} else {
			yyb107 = r.CheckBreak()
		}
		if yyb107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym110 := z.EncBinary()
		_ = yym110
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep111 := !z.EncBinary()
			yy2arr111 := z.EncBasicHandle().StructToArray
			var yyq111 [2]bool
			_, _, _ = yysep111, yyq111, yy2arr111
			const yyr111 bool = false
			var yynn111 int
			if yyr111 || yy2arr111 {
				r.EncodeArrayStart(2)
			} else {
				yynn111 = 2
				for _, b := range yyq111 {
					if b {
						yynn111++
					}
				}
				r.EncodeMapStart(yynn111)
				yynn111 = 0
			}
			if yyr111 || yy2arr111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym113 := z.EncBinary()
				_ = yym113
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym114 := z.EncBinary()
				_ = yym114
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr111 || yy2arr111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy116 := &x.CurrentValue
				yym117 := z.EncBinary()
				_ = yym117
				if false {
				} else if z.HasExtensions() && z.EncExt(yy116) {
				} else if !yym117 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy116)
				} else {
					z.EncFallback(yy116)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy118 := &x.CurrentValue
				yym119 := z.EncBinary()
				_ = yym119
				if false {
				} else if z.HasExtensions() && z.EncExt(yy118) {
				} else if !yym119 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy118)
				} else {
					z.EncFallback(yy118)
				}
			}
			if yyr111 || yy2arr111 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym120 := z.DecBinary()
	_ = yym120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct121 := r.ContainerType()
		if yyct121 == codecSelferValueTypeMap1234 {
			yyl121 := r.ReadMapStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl121, d)
			}
		} else if yyct121 == codecSelferValueTypeArray1234 {
			yyl121 := r.ReadArrayStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys122Slc
	var yyhl122 bool = l >= 0
	for yyj122 := 0; ; yyj122++ {
		if yyhl122 {
			if yyj122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys122Slc = r.DecodeBytes(yys122Slc, true, true)
		yys122 := string(yys122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys122 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv124 := &x.CurrentValue
				yym125 := z.DecBinary()
				_ = yym125
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv124) {
				} else if !yym125 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv124)
				} else {
					z.DecFallback(yyv124, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys122)
		} // end switch yys122
	} // end for yyj122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj126 int
	var yyb126 bool
	var yyhl126 bool = l >= 0
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv128 := &x.CurrentValue
		yym129 := z.DecBinary()
		_ = yym129
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv128) {
		} else if !yym129 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv128)
		} else {
			z.DecFallback(yyv128, false)
		}
	}
	for {
		yyj126++
		if yyhl126 {
			yyb126 = yyj126 > l
		} else {
			yyb126 = r.CheckBreak()
		}
		if yyb126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym130 := z.EncBinary()
		_ = yym130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep131 := !z.EncBinary()
			yy2arr131 := z.EncBasicHandle().StructToArray
			var yyq131 [1]bool
			_, _, _ = yysep131, yyq131, yy2arr131
			const yyr131 bool = false
			var yynn131 int
			if yyr131 || yy2arr131 {
				r.EncodeArrayStart(1)
			} else {
				yynn131 = 1
				for _, b := range yyq131 {
					if b {
						yynn131++
					}
				}
				r.EncodeMapStart(yynn131)
				yynn131 = 0
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym133 := z.EncBinary()
					_ = yym133
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym134 := z.EncBinary()
					_ = yym134
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym135 := z.DecBinary()
	_ = yym135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct136 := r.ContainerType()
		if yyct136 == codecSelferValueTypeMap1234 {
			yyl136 := r.ReadMapStart()
			if yyl136 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl136, d)
			}
		} else if yyct136 == codecSelferValueTypeArray1234 {
			yyl136 := r.ReadArrayStart()
			if yyl136 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl136, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys137Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys137Slc
	var yyhl137 bool = l >= 0
	for yyj137 := 0; ; yyj137++ {
		if yyhl137 {
			if yyj137 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys137Slc = r.DecodeBytes(yys137Slc, true, true)
		yys137 := string(yys137Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys137 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv138 := &x.Items
				yym139 := z.DecBinary()
				_ = yym139
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv138), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys137)
		} // end switch yys137
	} // end for yyj137
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj140 int
	var yyb140 bool
	var yyhl140 bool = l >= 0
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv141 := &x.Items
		yym142 := z.DecBinary()
		_ = yym142
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv141), d)
		}
	}
	for {
		yyj140++
		if yyhl140 {
			yyb140 = yyj140 > l
		} else {
			yyb140 = r.CheckBreak()
		}
		if yyb140 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj140-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [5]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			yyq144[0] = x.Kind != ""
			yyq144[1] = x.APIVersion != ""
			yyq144[2] = true
			yyq144[3] = x.Description != ""
			yyq144[4] = len(x.Versions) != 0
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(5)
			} else {
				yynn144 = 0
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[0] {
					yym146 := z.EncBinary()
					_ = yym146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[1] {
					yym149 := z.EncBinary()
					_ = yym149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq144[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym150 := z.EncBinary()
					_ = yym150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[2] {
					yy152 := &x.ObjectMeta
					yy152.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy153 := &x.ObjectMeta
					yy153.CodecEncodeSelf(e)
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[3] {
					yym155 := z.EncBinary()
					_ = yym155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq144[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym156 := z.EncBinary()
					_ = yym156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym158 := z.EncBinary()
						_ = yym158
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym159 := z.EncBinary()
						_ = yym159
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym160 := z.DecBinary()
	_ = yym160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct161 := r.ContainerType()
		if yyct161 == codecSelferValueTypeMap1234 {
			yyl161 := r.ReadMapStart()
			if yyl161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl161, d)
			}
		} else if yyct161 == codecSelferValueTypeArray1234 {
			yyl161 := r.ReadArrayStart()
			if yyl161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys162Slc
	var yyhl162 bool = l >= 0
	for yyj162 := 0; ; yyj162++ {
		if yyhl162 {
			if yyj162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys162Slc = r.DecodeBytes(yys162Slc, true, true)
		yys162 := string(yys162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys162 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv165 := &x.ObjectMeta
				yyv165.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv167 := &x.Versions
				yym168 := z.DecBinary()
				_ = yym168
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv167), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys162)
		} // end switch yys162
	} // end for yyj162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj169 int
	var yyb169 bool
	var yyhl169 bool = l >= 0
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv172 := &x.ObjectMeta
		yyv172.CodecDecodeSelf(d)
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv174 := &x.Versions
		yym175 := z.DecBinary()
		_ = yym175
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv174), d)
		}
	}
	for {
		yyj169++
		if yyhl169 {
			yyb169 = yyj169 > l
		} else {
			yyb169 = r.CheckBreak()
		}
		if yyb169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym176 := z.EncBinary()
		_ = yym176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep177 := !z.EncBinary()
			yy2arr177 := z.EncBasicHandle().StructToArray
			var yyq177 [4]bool
			_, _, _ = yysep177, yyq177, yy2arr177
			const yyr177 bool = false
			yyq177[0] = x.Kind != ""
			yyq177[1] = x.APIVersion != ""
			yyq177[2] = true
			var yynn177 int
			if yyr177 || yy2arr177 {
				r.EncodeArrayStart(4)
			} else {
				yynn177 = 1
				for _, b := range yyq177 {
					if b {
						yynn177++
					}
				}
				r.EncodeMapStart(yynn177)
				yynn177 = 0
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[0] {
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq177[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym180 := z.EncBinary()
					_ = yym180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[1] {
					yym182 := z.EncBinary()
					_ = yym182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq177[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym183 := z.EncBinary()
					_ = yym183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[2] {
					yy185 := &x.ListMeta
					yym186 := z.EncBinary()
					_ = yym186
					if false {
					} else if z.HasExtensions() && z.EncExt(yy185) {
					} else {
						z.EncFallback(yy185)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq177[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy187 := &x.ListMeta
					yym188 := z.EncBinary()
					_ = yym188
					if false {
					} else if z.HasExtensions() && z.EncExt(yy187) {
					} else {
						z.EncFallback(yy187)
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym190 := z.EncBinary()
					_ = yym190
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym192 := z.DecBinary()
	_ = yym192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct193 := r.ContainerType()
		if yyct193 == codecSelferValueTypeMap1234 {
			yyl193 := r.ReadMapStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl193, d)
			}
		} else if yyct193 == codecSelferValueTypeArray1234 {
			yyl193 := r.ReadArrayStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys194Slc
	var yyhl194 bool = l >= 0
	for yyj194 := 0; ; yyj194++ {
		if yyhl194 {
			if yyj194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys194Slc = r.DecodeBytes(yys194Slc, true, true)
		yys194 := string(yys194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys194 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv197 := &x.ListMeta
				yym198 := z.DecBinary()
				_ = yym198
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv197) {
				} else {
					z.DecFallback(yyv197, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv199 := &x.Items
				yym200 := z.DecBinary()
				_ = yym200
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv199), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys194)
		} // end switch yys194
	} // end for yyj194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj201 int
	var yyb201 bool
	var yyhl201 bool = l >= 0
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv204 := &x.ListMeta
		yym205 := z.DecBinary()
		_ = yym205
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv204) {
		} else {
			z.DecFallback(yyv204, false)
		}
	}
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv206 := &x.Items
		yym207 := z.DecBinary()
		_ = yym207
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv206), d)
		}
	}
	for {
		yyj201++
		if yyhl201 {
			yyb201 = yyj201 > l
		} else {
			yyb201 = r.CheckBreak()
		}
		if yyb201 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj201-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym208 := z.EncBinary()
		_ = yym208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep209 := !z.EncBinary()
			yy2arr209 := z.EncBasicHandle().StructToArray
			var yyq209 [1]bool
			_, _, _ = yysep209, yyq209, yy2arr209
			const yyr209 bool = false
			yyq209[0] = x.Name != ""
			var yynn209 int
			if yyr209 || yy2arr209 {
				r.EncodeArrayStart(1)
			} else {
				yynn209 = 0
				for _, b := range yyq209 {
					if b {
						yynn209++
					}
				}
				r.EncodeMapStart(yynn209)
				yynn209 = 0
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq209[0] {
					yym211 := z.EncBinary()
					_ = yym211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq209[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym212 := z.EncBinary()
					_ = yym212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym213 := z.DecBinary()
	_ = yym213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct214 := r.ContainerType()
		if yyct214 == codecSelferValueTypeMap1234 {
			yyl214 := r.ReadMapStart()
			if yyl214 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl214, d)
			}
		} else if yyct214 == codecSelferValueTypeArray1234 {
			yyl214 := r.ReadArrayStart()
			if yyl214 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys215Slc
	var yyhl215 bool = l >= 0
	for yyj215 := 0; ; yyj215++ {
		if yyhl215 {
			if yyj215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys215Slc = r.DecodeBytes(yys215Slc, true, true)
		yys215 := string(yys215Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys215 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys215)
		} // end switch yys215
	} // end for yyj215
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj217 int
	var yyb217 bool
	var yyhl217 bool = l >= 0
	yyj217++
	if yyhl217 {
		yyb217 = yyj217 > l
	} else {
		yyb217 = r.CheckBreak()
	}
	if yyb217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj217++
		if yyhl217 {
			yyb217 = yyj217 > l
		} else {
			yyb217 = r.CheckBreak()
		}
		if yyb217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym219 := z.EncBinary()
		_ = yym219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep220 := !z.EncBinary()
			yy2arr220 := z.EncBasicHandle().StructToArray
			var yyq220 [4]bool
			_, _, _ = yysep220, yyq220, yy2arr220
			const yyr220 bool = false
			yyq220[0] = x.Kind != ""
			yyq220[1] = x.APIVersion != ""
			yyq220[2] = true
			yyq220[3] = len(x.Data) != 0
			var yynn220 int
			if yyr220 || yy2arr220 {
				r.EncodeArrayStart(4)
			} else {
				yynn220 = 0
				for _, b := range yyq220 {
					if b {
						yynn220++
					}
				}
				r.EncodeMapStart(yynn220)
				yynn220 = 0
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[0] {
					yym222 := z.EncBinary()
					_ = yym222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq220[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym223 := z.EncBinary()
					_ = yym223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[1] {
					yym225 := z.EncBinary()
					_ = yym225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq220[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym226 := z.EncBinary()
					_ = yym226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[2] {
					yy228 := &x.ObjectMeta
					yy228.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq220[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy229 := &x.ObjectMeta
					yy229.CodecEncodeSelf(e)
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym231 := z.EncBinary()
						_ = yym231
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq220[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym232 := z.EncBinary()
						_ = yym232
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym233 := z.DecBinary()
	_ = yym233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct234 := r.ContainerType()
		if yyct234 == codecSelferValueTypeMap1234 {
			yyl234 := r.ReadMapStart()
			if yyl234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl234, d)
			}
		} else if yyct234 == codecSelferValueTypeArray1234 {
			yyl234 := r.ReadArrayStart()
			if yyl234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys235Slc
	var yyhl235 bool = l >= 0
	for yyj235 := 0; ; yyj235++ {
		if yyhl235 {
			if yyj235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys235Slc = r.DecodeBytes(yys235Slc, true, true)
		yys235 := string(yys235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys235 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv238 := &x.ObjectMeta
				yyv238.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv239 := &x.Data
				yym240 := z.DecBinary()
				_ = yym240
				if false {
				} else {
					*yyv239 = r.DecodeBytes(*(*[]byte)(yyv239), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys235)
		} // end switch yys235
	} // end for yyj235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj241 int
	var yyb241 bool
	var yyhl241 bool = l >= 0
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv244 := &x.ObjectMeta
		yyv244.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv245 := &x.Data
		yym246 := z.DecBinary()
		_ = yym246
		if false {
		} else {
			*yyv245 = r.DecodeBytes(*(*[]byte)(yyv245), false, false)
		}
	}
	for {
		yyj241++
		if yyhl241 {
			yyb241 = yyj241 > l
		} else {
			yyb241 = r.CheckBreak()
		}
		if yyb241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym247 := z.EncBinary()
		_ = yym247
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep248 := !z.EncBinary()
			yy2arr248 := z.EncBasicHandle().StructToArray
			var yyq248 [5]bool
			_, _, _ = yysep248, yyq248, yy2arr248
			const yyr248 bool = false
			yyq248[0] = x.Kind != ""
			yyq248[1] = x.APIVersion != ""
			yyq248[2] = true
			yyq248[3] = true
			yyq248[4] = true
			var yynn248 int
			if yyr248 || yy2arr248 {
				r.EncodeArrayStart(5)
			} else {
				yynn248 = 0
				for _, b := range yyq248 {
					if b {
						yynn248++
					}
				}
				r.EncodeMapStart(yynn248)
				yynn248 = 0
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq248[0] {
					yym250 := z.EncBinary()
					_ = yym250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq248[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym251 := z.EncBinary()
					_ = yym251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq248[1] {
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq248[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym254 := z.EncBinary()
					_ = yym254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq248[2] {
					yy256 := &x.ObjectMeta
					yy256.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq248[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy257 := &x.ObjectMeta
					yy257.CodecEncodeSelf(e)
				}
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq248[3] {
					yy259 := &x.Spec
					yy259.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq248[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy260 := &x.Spec
					yy260.CodecEncodeSelf(e)
				}
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq248[4] {
					yy262 := &x.Status
					yy262.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq248[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy263 := &x.Status
					yy263.CodecEncodeSelf(e)
				}
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym264 := z.DecBinary()
	_ = yym264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct265 := r.ContainerType()
		if yyct265 == codecSelferValueTypeMap1234 {
			yyl265 := r.ReadMapStart()
			if yyl265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl265, d)
			}
		} else if yyct265 == codecSelferValueTypeArray1234 {
			yyl265 := r.ReadArrayStart()
			if yyl265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys266Slc
	var yyhl266 bool = l >= 0
	for yyj266 := 0; ; yyj266++ {
		if yyhl266 {
			if yyj266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys266Slc = r.DecodeBytes(yys266Slc, true, true)
		yys266 := string(yys266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys266 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv269 := &x.ObjectMeta
				yyv269.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv270 := &x.Spec
				yyv270.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv271 := &x.Status
				yyv271.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys266)
		} // end switch yys266
	} // end for yyj266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj272 int
	var yyb272 bool
	var yyhl272 bool = l >= 0
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv275 := &x.ObjectMeta
		yyv275.CodecDecodeSelf(d)
	}
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv276 := &x.Spec
		yyv276.CodecDecodeSelf(d)
	}
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv277 := &x.Status
		yyv277.CodecDecodeSelf(d)
	}
	for {
		yyj272++
		if yyhl272 {
			yyb272 = yyj272 > l
		} else {
			yyb272 = r.CheckBreak()
		}
		if yyb272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym278 := z.EncBinary()
		_ = yym278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep279 := !z.EncBinary()
			yy2arr279 := z.EncBasicHandle().StructToArray
			var yyq279 [8]bool
			_, _, _ = yysep279, yyq279, yy2arr279
			const yyr279 bool = false
			yyq279[0] = x.Replicas != 0
			yyq279[1] = x.Selector != nil
			yyq279[3] = true
			yyq279[4] = x.MinReadySeconds != 0
			yyq279[5] = x.RevisionHistoryLimit != nil
			yyq279[6] = x.Paused != false
			yyq279[7] = x.RollbackTo != nil
			var yynn279 int
			if yyr279 || yy2arr279 {
				r.EncodeArrayStart(8)
			} else {
				yynn279 = 1
				for _, b := range yyq279 {
					if b {
						yynn279++
					}
				}
				r.EncodeMapStart(yynn279)
				yynn279 = 0
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[0] {
					yym281 := z.EncBinary()
					_ = yym281
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq279[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym282 := z.EncBinary()
					_ = yym282
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym284 := z.EncBinary()
						_ = yym284
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym285 := z.EncBinary()
						_ = yym285
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy287 := &x.Template
				yy287.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy288 := &x.Template
				yy288.CodecEncodeSelf(e)
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[3] {
					yy290 := &x.Strategy
					yy290.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy291 := &x.Strategy
					yy291.CodecEncodeSelf(e)
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[4] {
					yym293 := z.EncBinary()
					_ = yym293
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq279[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym294 := z.EncBinary()
					_ = yym294
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[5] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy296 := *x.RevisionHistoryLimit
						yym297 := z.EncBinary()
						_ = yym297
						if false {
						} else {
							r.EncodeInt(int64(yy296))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy298 := *x.RevisionHistoryLimit
						yym299 := z.EncBinary()
						_ = yym299
						if false {
						} else {
							r.EncodeInt(int64(yy298))
						}
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[6] {
					yym301 := z.EncBinary()
					_ = yym301
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq279[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym304 := z.DecBinary()
	_ = yym304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct305 := r.ContainerType()
		if yyct305 == codecSelferValueTypeMap1234 {
			yyl305 := r.ReadMapStart()
			if yyl305 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl305, d)
			}
		} else if yyct305 == codecSelferValueTypeArray1234 {
			yyl305 := r.ReadArrayStart()
			if yyl305 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys306Slc
	var yyhl306 bool = l >= 0
	for yyj306 := 0; ; yyj306++ {
		if yyhl306 {
			if yyj306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys306Slc = r.DecodeBytes(yys306Slc, true, true)
		yys306 := string(yys306Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys306 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym309 := z.DecBinary()
				_ = yym309
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv310 := &x.Template
				yyv310.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv311 := &x.Strategy
				yyv311.CodecDecodeSelf(d)
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int32)
				}
				yym314 := z.DecBinary()
				_ = yym314
				if false {
				} else {
					*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
				}
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys306)
		} // end switch yys306
	} // end for yyj306
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj317 int
	var yyb317 bool
	var yyhl317 bool = l >= 0
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym320 := z.DecBinary()
		_ = yym320
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv321 := &x.Template
		yyv321.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv322 := &x.Strategy
		yyv322.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int32)
		}
		yym325 := z.DecBinary()
		_ = yym325
		if false {
		} else {
			*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
		}
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	for {
		yyj317++
		if yyhl317 {
			yyb317 = yyj317 > l
		} else {
			yyb317 = r.CheckBreak()
		}
		if yyb317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym328 := z.EncBinary()
		_ = yym328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep329 := !z.EncBinary()
			yy2arr329 := z.EncBasicHandle().StructToArray
			var yyq329 [5]bool
			_, _, _ = yysep329, yyq329, yy2arr329
			const yyr329 bool = false
			yyq329[0] = x.Kind != ""
			yyq329[1] = x.APIVersion != ""
			yyq329[3] = len(x.UpdatedAnnotations) != 0
			var yynn329 int
			if yyr329 || yy2arr329 {
				r.EncodeArrayStart(5)
			} else {
				yynn329 = 2
				for _, b := range yyq329 {
					if b {
						yynn329++
					}
				}
				r.EncodeMapStart(yynn329)
				yynn329 = 0
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[0] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[1] {
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym337 := z.EncBinary()
				_ = yym337
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym338 := z.EncBinary()
				_ = yym338
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym340 := z.EncBinary()
						_ = yym340
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym341 := z.EncBinary()
						_ = yym341
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy343 := &x.RollbackTo
				yy343.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy344 := &x.RollbackTo
				yy344.CodecEncodeSelf(e)
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym345 := z.DecBinary()
	_ = yym345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct346 := r.ContainerType()
		if yyct346 == codecSelferValueTypeMap1234 {
			yyl346 := r.ReadMapStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl346, d)
			}
		} else if yyct346 == codecSelferValueTypeArray1234 {
			yyl346 := r.ReadArrayStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys347Slc
	var yyhl347 bool = l >= 0
	for yyj347 := 0; ; yyj347++ {
		if yyhl347 {
			if yyj347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys347Slc = r.DecodeBytes(yys347Slc, true, true)
		yys347 := string(yys347Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys347 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv351 := &x.UpdatedAnnotations
				yym352 := z.DecBinary()
				_ = yym352
				if false {
				} else {
					z.F.DecMapStringStringX(yyv351, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv353 := &x.RollbackTo
				yyv353.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys347)
		} // end switch yys347
	} // end for yyj347
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj354 int
	var yyb354 bool
	var yyhl354 bool = l >= 0
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv358 := &x.UpdatedAnnotations
		yym359 := z.DecBinary()
		_ = yym359
		if false {
		} else {
			z.F.DecMapStringStringX(yyv358, false, d)
		}
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv360 := &x.RollbackTo
		yyv360.CodecDecodeSelf(d)
	}
	for {
		yyj354++
		if yyhl354 {
			yyb354 = yyj354 > l
		} else {
			yyb354 = r.CheckBreak()
		}
		if yyb354 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj354-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym361 := z.EncBinary()
		_ = yym361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep362 := !z.EncBinary()
			yy2arr362 := z.EncBasicHandle().StructToArray
			var yyq362 [1]bool
			_, _, _ = yysep362, yyq362, yy2arr362
			const yyr362 bool = false
			yyq362[0] = x.Revision != 0
			var yynn362 int
			if yyr362 || yy2arr362 {
				r.EncodeArrayStart(1)
			} else {
				yynn362 = 0
				for _, b := range yyq362 {
					if b {
						yynn362++
					}
				}
				r.EncodeMapStart(yynn362)
				yynn362 = 0
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq362[0] {
					yym364 := z.EncBinary()
					_ = yym364
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq362[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym366 := z.DecBinary()
	_ = yym366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct367 := r.ContainerType()
		if yyct367 == codecSelferValueTypeMap1234 {
			yyl367 := r.ReadMapStart()
			if yyl367 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl367, d)
			}
		} else if yyct367 == codecSelferValueTypeArray1234 {
			yyl367 := r.ReadArrayStart()
			if yyl367 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl367, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys368Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys368Slc
	var yyhl368 bool = l >= 0
	for yyj368 := 0; ; yyj368++ {
		if yyhl368 {
			if yyj368 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys368Slc = r.DecodeBytes(yys368Slc, true, true)
		yys368 := string(yys368Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys368 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys368)
		} // end switch yys368
	} // end for yyj368
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj370 int
	var yyb370 bool
	var yyhl370 bool = l >= 0
	yyj370++
	if yyhl370 {
		yyb370 = yyj370 > l
	} else {
		yyb370 = r.CheckBreak()
	}
	if yyb370 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj370++
		if yyhl370 {
			yyb370 = yyj370 > l
		} else {
			yyb370 = r.CheckBreak()
		}
		if yyb370 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj370-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym372 := z.EncBinary()
		_ = yym372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep373 := !z.EncBinary()
			yy2arr373 := z.EncBasicHandle().StructToArray
			var yyq373 [2]bool
			_, _, _ = yysep373, yyq373, yy2arr373
			const yyr373 bool = false
			yyq373[0] = x.Type != ""
			yyq373[1] = x.RollingUpdate != nil
			var yynn373 int
			if yyr373 || yy2arr373 {
				r.EncodeArrayStart(2)
			} else {
				yynn373 = 0
				for _, b := range yyq373 {
					if b {
						yynn373++
					}
				}
				r.EncodeMapStart(yynn373)
				yynn373 = 0
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq373[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq373[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq373[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq373[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym376 := z.DecBinary()
	_ = yym376
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct377 := r.ContainerType()
		if yyct377 == codecSelferValueTypeMap1234 {
			yyl377 := r.ReadMapStart()
			if yyl377 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl377, d)
			}
		} else if yyct377 == codecSelferValueTypeArray1234 {
			yyl377 := r.ReadArrayStart()
			if yyl377 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl377, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys378Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys378Slc
	var yyhl378 bool = l >= 0
	for yyj378 := 0; ; yyj378++ {
		if yyhl378 {
			if yyj378 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys378Slc = r.DecodeBytes(yys378Slc, true, true)
		yys378 := string(yys378Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys378 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys378)
		} // end switch yys378
	} // end for yyj378
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym384 := z.EncBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym385 := z.DecBinary()
	_ = yym385
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym386 := z.EncBinary()
		_ = yym386
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep387 := !z.EncBinary()
			yy2arr387 := z.EncBasicHandle().StructToArray
			var yyq387 [2]bool
			_, _, _ = yysep387, yyq387, yy2arr387
			const yyr387 bool = false
			yyq387[0] = true
			yyq387[1] = true
			var yynn387 int
			if yyr387 || yy2arr387 {
				r.EncodeArrayStart(2)
			} else {
				yynn387 = 0
				for _, b := range yyq387 {
					if b {
						yynn387++
					}
				}
				r.EncodeMapStart(yynn387)
				yynn387 = 0
			}
			if yyr387 || yy2arr387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq387[0] {
					yy389 := &x.MaxUnavailable
					yym390 := z.EncBinary()
					_ = yym390
					if false {
					} else if z.HasExtensions() && z.EncExt(yy389) {
					} else if !yym390 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy389)
					} else {
						z.EncFallback(yy389)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq387[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy391 := &x.MaxUnavailable
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else if z.HasExtensions() && z.EncExt(yy391) {
					} else if !yym392 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy391)
					} else {
						z.EncFallback(yy391)
					}
				}
			}
			if yyr387 || yy2arr387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq387[1] {
					yy394 := &x.MaxSurge
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else if z.HasExtensions() && z.EncExt(yy394) {
					} else if !yym395 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy394)
					} else {
						z.EncFallback(yy394)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq387[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy396 := &x.MaxSurge
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else if z.HasExtensions() && z.EncExt(yy396) {
					} else if !yym397 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy396)
					} else {
						z.EncFallback(yy396)
					}
				}
			}
			if yyr387 || yy2arr387 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym398 := z.DecBinary()
	_ = yym398
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct399 := r.ContainerType()
		if yyct399 == codecSelferValueTypeMap1234 {
			yyl399 := r.ReadMapStart()
			if yyl399 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl399, d)
			}
		} else if yyct399 == codecSelferValueTypeArray1234 {
			yyl399 := r.ReadArrayStart()
			if yyl399 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl399, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys400Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys400Slc
	var yyhl400 bool = l >= 0
	for yyj400 := 0; ; yyj400++ {
		if yyhl400 {
			if yyj400 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys400Slc = r.DecodeBytes(yys400Slc, true, true)
		yys400 := string(yys400Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys400 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg5_intstr.IntOrString{}
			} else {
				yyv401 := &x.MaxUnavailable
				yym402 := z.DecBinary()
				_ = yym402
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv401) {
				} else if !yym402 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv401)
				} else {
					z.DecFallback(yyv401, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg5_intstr.IntOrString{}
			} else {
				yyv403 := &x.MaxSurge
				yym404 := z.DecBinary()
				_ = yym404
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv403) {
				} else if !yym404 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv403)
				} else {
					z.DecFallback(yyv403, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys400)
		} // end switch yys400
	} // end for yyj400
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj405 int
	var yyb405 bool
	var yyhl405 bool = l >= 0
	yyj405++
	if yyhl405 {
		yyb405 = yyj405 > l
	} else {
		yyb405 = r.CheckBreak()
	}
	if yyb405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg5_intstr.IntOrString{}
	} else {
		yyv406 := &x.MaxUnavailable
		yym407 := z.DecBinary()
		_ = yym407
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv406) {
		} else if !yym407 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv406)
		} else {
			z.DecFallback(yyv406, false)
		}
	}
	yyj405++
	if yyhl405 {
		yyb405 = yyj405 > l
	} else {
		yyb405 = r.CheckBreak()
	}
	if yyb405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg5_intstr.IntOrString{}
	} else {
		yyv408 := &x.MaxSurge
		yym409 := z.DecBinary()
		_ = yym409
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv408) {
		} else if !yym409 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv408)
		} else {
			z.DecFallback(yyv408, false)
		}
	}
	for {
		yyj405++
		if yyhl405 {
			yyb405 = yyj405 > l
		} else {
			yyb405 = r.CheckBreak()
		}
		if yyb405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym410 := z.EncBinary()
		_ = yym410
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep411 := !z.EncBinary()
			yy2arr411 := z.EncBasicHandle().StructToArray
			var yyq411 [5]bool
			_, _, _ = yysep411, yyq411, yy2arr411
			const yyr411 bool = false
			yyq411[0] = x.ObservedGeneration != 0
			yyq411[1] = x.Replicas != 0
			yyq411[2] = x.UpdatedReplicas != 0
			yyq411[3] = x.AvailableReplicas != 0
			yyq411[4] = x.UnavailableReplicas != 0
			var yynn411 int
			if yyr411 || yy2arr411 {
				r.EncodeArrayStart(5)
			} else {
				yynn411 = 0
				for _, b := range yyq411 {
					if b {
						yynn411++
					}
				}
				r.EncodeMapStart(yynn411)
				yynn411 = 0
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq411[0] {
					yym413 := z.EncBinary()
					_ = yym413
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq411[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym414 := z.EncBinary()
					_ = yym414
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq411[1] {
					yym416 := z.EncBinary()
					_ = yym416
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq411[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym417 := z.EncBinary()
					_ = yym417
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq411[2] {
					yym419 := z.EncBinary()
					_ = yym419
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq411[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym420 := z.EncBinary()
					_ = yym420
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq411[3] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq411[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq411[4] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq411[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym427 := z.DecBinary()
	_ = yym427
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct428 := r.ContainerType()
		if yyct428 == codecSelferValueTypeMap1234 {
			yyl428 := r.ReadMapStart()
			if yyl428 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl428, d)
			}
		} else if yyct428 == codecSelferValueTypeArray1234 {
			yyl428 := r.ReadArrayStart()
			if yyl428 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl428, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys429Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys429Slc
	var yyhl429 bool = l >= 0
	for yyj429 := 0; ; yyj429++ {
		if yyhl429 {
			if yyj429 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys429Slc = r.DecodeBytes(yys429Slc, true, true)
		yys429 := string(yys429Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys429 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys429)
		} // end switch yys429
	} // end for yyj429
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj435 int
	var yyb435 bool
	var yyhl435 bool = l >= 0
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int32(r.DecodeInt(32))
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int32(r.DecodeInt(32))
	}
	for {
		yyj435++
		if yyhl435 {
			yyb435 = yyj435 > l
		} else {
			yyb435 = r.CheckBreak()
		}
		if yyb435 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj435-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym441 := z.EncBinary()
		_ = yym441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep442 := !z.EncBinary()
			yy2arr442 := z.EncBasicHandle().StructToArray
			var yyq442 [4]bool
			_, _, _ = yysep442, yyq442, yy2arr442
			const yyr442 bool = false
			yyq442[0] = x.Kind != ""
			yyq442[1] = x.APIVersion != ""
			yyq442[2] = true
			var yynn442 int
			if yyr442 || yy2arr442 {
				r.EncodeArrayStart(4)
			} else {
				yynn442 = 1
				for _, b := range yyq442 {
					if b {
						yynn442++
					}
				}
				r.EncodeMapStart(yynn442)
				yynn442 = 0
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[0] {
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[1] {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[2] {
					yy450 := &x.ListMeta
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else if z.HasExtensions() && z.EncExt(yy450) {
					} else {
						z.EncFallback(yy450)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq442[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy452 := &x.ListMeta
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy452) {
					} else {
						z.EncFallback(yy452)
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym455 := z.EncBinary()
					_ = yym455
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym457 := z.DecBinary()
	_ = yym457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct458 := r.ContainerType()
		if yyct458 == codecSelferValueTypeMap1234 {
			yyl458 := r.ReadMapStart()
			if yyl458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl458, d)
			}
		} else if yyct458 == codecSelferValueTypeArray1234 {
			yyl458 := r.ReadArrayStart()
			if yyl458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys459Slc
	var yyhl459 bool = l >= 0
	for yyj459 := 0; ; yyj459++ {
		if yyhl459 {
			if yyj459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys459Slc = r.DecodeBytes(yys459Slc, true, true)
		yys459 := string(yys459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys459 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv462 := &x.ListMeta
				yym463 := z.DecBinary()
				_ = yym463
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv462) {
				} else {
					z.DecFallback(yyv462, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv464 := &x.Items
				yym465 := z.DecBinary()
				_ = yym465
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv464), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys459)
		} // end switch yys459
	} // end for yyj459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj466 int
	var yyb466 bool
	var yyhl466 bool = l >= 0
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv469 := &x.ListMeta
		yym470 := z.DecBinary()
		_ = yym470
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv469) {
		} else {
			z.DecFallback(yyv469, false)
		}
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv471 := &x.Items
		yym472 := z.DecBinary()
		_ = yym472
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv471), d)
		}
	}
	for {
		yyj466++
		if yyhl466 {
			yyb466 = yyj466 > l
		} else {
			yyb466 = r.CheckBreak()
		}
		if yyb466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym473 := z.EncBinary()
		_ = yym473
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep474 := !z.EncBinary()
			yy2arr474 := z.EncBasicHandle().StructToArray
			var yyq474 [2]bool
			_, _, _ = yysep474, yyq474, yy2arr474
			const yyr474 bool = false
			yyq474[0] = x.Selector != nil
			var yynn474 int
			if yyr474 || yy2arr474 {
				r.EncodeArrayStart(2)
			} else {
				yynn474 = 1
				for _, b := range yyq474 {
					if b {
						yynn474++
					}
				}
				r.EncodeMapStart(yynn474)
				yynn474 = 0
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym476 := z.EncBinary()
						_ = yym476
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym477 := z.EncBinary()
						_ = yym477
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy479 := &x.Template
				yy479.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy480 := &x.Template
				yy480.CodecEncodeSelf(e)
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym485 := z.DecBinary()
				_ = yym485
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv486 := &x.Template
				yyv486.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj487 int
	var yyb487 bool
	var yyhl487 bool = l >= 0
	yyj487++
	if yyhl487 {
		yyb487 = yyj487 > l
	} else {
		yyb487 = r.CheckBreak()
	}
	if yyb487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym489 := z.DecBinary()
		_ = yym489
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj487++
	if yyhl487 {
		yyb487 = yyj487 > l
	} else {
		yyb487 = r.CheckBreak()
	}
	if yyb487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv490 := &x.Template
		yyv490.CodecDecodeSelf(d)
	}
	for {
		yyj487++
		if yyhl487 {
			yyb487 = yyj487 > l
		} else {
			yyb487 = r.CheckBreak()
		}
		if yyb487 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj487-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym491 := z.EncBinary()
		_ = yym491
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep492 := !z.EncBinary()
			yy2arr492 := z.EncBasicHandle().StructToArray
			var yyq492 [4]bool
			_, _, _ = yysep492, yyq492, yy2arr492
			const yyr492 bool = false
			var yynn492 int
			if yyr492 || yy2arr492 {
				r.EncodeArrayStart(4)
			} else {
				yynn492 = 4
				for _, b := range yyq492 {
					if b {
						yynn492++
					}
				}
				r.EncodeMapStart(yynn492)
				yynn492 = 0
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym494 := z.EncBinary()
				_ = yym494
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym495 := z.EncBinary()
				_ = yym495
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym497 := z.EncBinary()
				_ = yym497
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym498 := z.EncBinary()
				_ = yym498
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym500 := z.EncBinary()
				_ = yym500
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym501 := z.EncBinary()
				_ = yym501
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberReady"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym504 := z.EncBinary()
				_ = yym504
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym505 := z.DecBinary()
	_ = yym505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct506 := r.ContainerType()
		if yyct506 == codecSelferValueTypeMap1234 {
			yyl506 := r.ReadMapStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl506, d)
			}
		} else if yyct506 == codecSelferValueTypeArray1234 {
			yyl506 := r.ReadArrayStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys507Slc
	var yyhl507 bool = l >= 0
	for yyj507 := 0; ; yyj507++ {
		if yyhl507 {
			if yyj507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys507Slc = r.DecodeBytes(yys507Slc, true, true)
		yys507 := string(yys507Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys507 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int32(r.DecodeInt(32))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberReady":
			if r.TryDecodeAsNil() {
				x.NumberReady = 0
			} else {
				x.NumberReady = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys507)
		} // end switch yys507
	} // end for yyj507
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj512 int
	var yyb512 bool
	var yyhl512 bool = l >= 0
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int32(r.DecodeInt(32))
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberReady = 0
	} else {
		x.NumberReady = int32(r.DecodeInt(32))
	}
	for {
		yyj512++
		if yyhl512 {
			yyb512 = yyj512 > l
		} else {
			yyb512 = r.CheckBreak()
		}
		if yyb512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym517 := z.EncBinary()
		_ = yym517
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep518 := !z.EncBinary()
			yy2arr518 := z.EncBasicHandle().StructToArray
			var yyq518 [5]bool
			_, _, _ = yysep518, yyq518, yy2arr518
			const yyr518 bool = false
			yyq518[0] = x.Kind != ""
			yyq518[1] = x.APIVersion != ""
			yyq518[2] = true
			yyq518[3] = true
			yyq518[4] = true
			var yynn518 int
			if yyr518 || yy2arr518 {
				r.EncodeArrayStart(5)
			} else {
				yynn518 = 0
				for _, b := range yyq518 {
					if b {
						yynn518++
					}
				}
				r.EncodeMapStart(yynn518)
				yynn518 = 0
			}
			if yyr518 || yy2arr518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq518[0] {
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq518[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym521 := z.EncBinary()
					_ = yym521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr518 || yy2arr518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq518[1] {
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq518[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym524 := z.EncBinary()
					_ = yym524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr518 || yy2arr518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq518[2] {
					yy526 := &x.ObjectMeta
					yy526.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq518[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy527 := &x.ObjectMeta
					yy527.CodecEncodeSelf(e)
				}
			}
			if yyr518 || yy2arr518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq518[3] {
					yy529 := &x.Spec
					yy529.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq518[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy530 := &x.Spec
					yy530.CodecEncodeSelf(e)
				}
			}
			if yyr518 || yy2arr518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq518[4] {
					yy532 := &x.Status
					yy532.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq518[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy533 := &x.Status
					yy533.CodecEncodeSelf(e)
				}
			}
			if yyr518 || yy2arr518 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym534 := z.DecBinary()
	_ = yym534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct535 := r.ContainerType()
		if yyct535 == codecSelferValueTypeMap1234 {
			yyl535 := r.ReadMapStart()
			if yyl535 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl535, d)
			}
		} else if yyct535 == codecSelferValueTypeArray1234 {
			yyl535 := r.ReadArrayStart()
			if yyl535 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys536Slc
	var yyhl536 bool = l >= 0
	for yyj536 := 0; ; yyj536++ {
		if yyhl536 {
			if yyj536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys536Slc = r.DecodeBytes(yys536Slc, true, true)
		yys536 := string(yys536Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys536 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv539 := &x.ObjectMeta
				yyv539.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv540 := &x.Spec
				yyv540.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv541 := &x.Status
				yyv541.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys536)
		} // end switch yys536
	} // end for yyj536
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj542 int
	var yyb542 bool
	var yyhl542 bool = l >= 0
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv545 := &x.ObjectMeta
		yyv545.CodecDecodeSelf(d)
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv546 := &x.Spec
		yyv546.CodecDecodeSelf(d)
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv547 := &x.Status
		yyv547.CodecDecodeSelf(d)
	}
	for {
		yyj542++
		if yyhl542 {
			yyb542 = yyj542 > l
		} else {
			yyb542 = r.CheckBreak()
		}
		if yyb542 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj542-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym548 := z.EncBinary()
		_ = yym548
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep549 := !z.EncBinary()
			yy2arr549 := z.EncBasicHandle().StructToArray
			var yyq549 [4]bool
			_, _, _ = yysep549, yyq549, yy2arr549
			const yyr549 bool = false
			yyq549[0] = x.Kind != ""
			yyq549[1] = x.APIVersion != ""
			yyq549[2] = true
			var yynn549 int
			if yyr549 || yy2arr549 {
				r.EncodeArrayStart(4)
			} else {
				yynn549 = 1
				for _, b := range yyq549 {
					if b {
						yynn549++
					}
				}
				r.EncodeMapStart(yynn549)
				yynn549 = 0
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[0] {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq549[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[1] {
					yym554 := z.EncBinary()
					_ = yym554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq549[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[2] {
					yy557 := &x.ListMeta
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else if z.HasExtensions() && z.EncExt(yy557) {
					} else {
						z.EncFallback(yy557)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy559 := &x.ListMeta
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else if z.HasExtensions() && z.EncExt(yy559) {
					} else {
						z.EncFallback(yy559)
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym563 := z.EncBinary()
					_ = yym563
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym564 := z.DecBinary()
	_ = yym564
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct565 := r.ContainerType()
		if yyct565 == codecSelferValueTypeMap1234 {
			yyl565 := r.ReadMapStart()
			if yyl565 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl565, d)
			}
		} else if yyct565 == codecSelferValueTypeArray1234 {
			yyl565 := r.ReadArrayStart()
			if yyl565 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl565, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys566Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys566Slc
	var yyhl566 bool = l >= 0
	for yyj566 := 0; ; yyj566++ {
		if yyhl566 {
			if yyj566 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys566Slc = r.DecodeBytes(yys566Slc, true, true)
		yys566 := string(yys566Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys566 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv569 := &x.ListMeta
				yym570 := z.DecBinary()
				_ = yym570
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv569) {
				} else {
					z.DecFallback(yyv569, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv571 := &x.Items
				yym572 := z.DecBinary()
				_ = yym572
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv571), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys566)
		} // end switch yys566
	} // end for yyj566
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj573 int
	var yyb573 bool
	var yyhl573 bool = l >= 0
	yyj573++
	if yyhl573 {
		yyb573 = yyj573 > l
	} else {
		yyb573 = r.CheckBreak()
	}
	if yyb573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj573++
	if yyhl573 {
		yyb573 = yyj573 > l
	} else {
		yyb573 = r.CheckBreak()
	}
	if yyb573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj573++
	if yyhl573 {
		yyb573 = yyj573 > l
	} else {
		yyb573 = r.CheckBreak()
	}
	if yyb573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv576 := &x.ListMeta
		yym577 := z.DecBinary()
		_ = yym577
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv576) {
		} else {
			z.DecFallback(yyv576, false)
		}
	}
	yyj573++
	if yyhl573 {
		yyb573 = yyj573 > l
	} else {
		yyb573 = r.CheckBreak()
	}
	if yyb573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv578 := &x.Items
		yym579 := z.DecBinary()
		_ = yym579
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv578), d)
		}
	}
	for {
		yyj573++
		if yyhl573 {
			yyb573 = yyj573 > l
		} else {
			yyb573 = r.CheckBreak()
		}
		if yyb573 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj573-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym580 := z.EncBinary()
		_ = yym580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep581 := !z.EncBinary()
			yy2arr581 := z.EncBasicHandle().StructToArray
			var yyq581 [4]bool
			_, _, _ = yysep581, yyq581, yy2arr581
			const yyr581 bool = false
			yyq581[0] = x.Kind != ""
			yyq581[1] = x.APIVersion != ""
			yyq581[2] = true
			var yynn581 int
			if yyr581 || yy2arr581 {
				r.EncodeArrayStart(4)
			} else {
				yynn581 = 1
				for _, b := range yyq581 {
					if b {
						yynn581++
					}
				}
				r.EncodeMapStart(yynn581)
				yynn581 = 0
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq581[0] {
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq581[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym584 := z.EncBinary()
					_ = yym584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq581[1] {
					yym586 := z.EncBinary()
					_ = yym586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq581[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq581[2] {
					yy589 := &x.ListMeta
					yym590 := z.EncBinary()
					_ = yym590
					if false {
					} else if z.HasExtensions() && z.EncExt(yy589) {
					} else {
						z.EncFallback(yy589)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq581[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy591 := &x.ListMeta
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else if z.HasExtensions() && z.EncExt(yy591) {
					} else {
						z.EncFallback(yy591)
					}
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct597 := r.ContainerType()
		if yyct597 == codecSelferValueTypeMap1234 {
			yyl597 := r.ReadMapStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl597, d)
			}
		} else if yyct597 == codecSelferValueTypeArray1234 {
			yyl597 := r.ReadArrayStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys598Slc
	var yyhl598 bool = l >= 0
	for yyj598 := 0; ; yyj598++ {
		if yyhl598 {
			if yyj598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys598Slc = r.DecodeBytes(yys598Slc, true, true)
		yys598 := string(yys598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys598 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv601 := &x.ListMeta
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv601) {
				} else {
					z.DecFallback(yyv601, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv603 := &x.Items
				yym604 := z.DecBinary()
				_ = yym604
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv603), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys598)
		} // end switch yys598
	} // end for yyj598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv608 := &x.ListMeta
		yym609 := z.DecBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv608) {
		} else {
			z.DecFallback(yyv608, false)
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv610 := &x.Items
		yym611 := z.DecBinary()
		_ = yym611
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv610), d)
		}
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym612 := z.EncBinary()
		_ = yym612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep613 := !z.EncBinary()
			yy2arr613 := z.EncBasicHandle().StructToArray
			var yyq613 [5]bool
			_, _, _ = yysep613, yyq613, yy2arr613
			const yyr613 bool = false
			yyq613[0] = x.Kind != ""
			yyq613[1] = x.APIVersion != ""
			yyq613[2] = true
			yyq613[3] = true
			yyq613[4] = true
			var yynn613 int
			if yyr613 || yy2arr613 {
				r.EncodeArrayStart(5)
			} else {
				yynn613 = 0
				for _, b := range yyq613 {
					if b {
						yynn613++
					}
				}
				r.EncodeMapStart(yynn613)
				yynn613 = 0
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[0] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[1] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[2] {
					yy621 := &x.ObjectMeta
					yy621.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq613[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy622 := &x.ObjectMeta
					yy622.CodecEncodeSelf(e)
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[3] {
					yy624 := &x.Spec
					yy624.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq613[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy625 := &x.Spec
					yy625.CodecEncodeSelf(e)
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[4] {
					yy627 := &x.Status
					yy627.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq613[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy628 := &x.Status
					yy628.CodecEncodeSelf(e)
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym629 := z.DecBinary()
	_ = yym629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct630 := r.ContainerType()
		if yyct630 == codecSelferValueTypeMap1234 {
			yyl630 := r.ReadMapStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl630, d)
			}
		} else if yyct630 == codecSelferValueTypeArray1234 {
			yyl630 := r.ReadArrayStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys631Slc
	var yyhl631 bool = l >= 0
	for yyj631 := 0; ; yyj631++ {
		if yyhl631 {
			if yyj631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys631Slc = r.DecodeBytes(yys631Slc, true, true)
		yys631 := string(yys631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys631 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv634 := &x.ObjectMeta
				yyv634.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv635 := &x.Spec
				yyv635.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv636 := &x.Status
				yyv636.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys631)
		} // end switch yys631
	} // end for yyj631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj637 int
	var yyb637 bool
	var yyhl637 bool = l >= 0
	yyj637++
	if yyhl637 {
		yyb637 = yyj637 > l
	} else {
		yyb637 = r.CheckBreak()
	}
	if yyb637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj637++
	if yyhl637 {
		yyb637 = yyj637 > l
	} else {
		yyb637 = r.CheckBreak()
	}
	if yyb637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj637++
	if yyhl637 {
		yyb637 = yyj637 > l
	} else {
		yyb637 = r.CheckBreak()
	}
	if yyb637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv640 := &x.ObjectMeta
		yyv640.CodecDecodeSelf(d)
	}
	yyj637++
	if yyhl637 {
		yyb637 = yyj637 > l
	} else {
		yyb637 = r.CheckBreak()
	}
	if yyb637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv641 := &x.Spec
		yyv641.CodecDecodeSelf(d)
	}
	yyj637++
	if yyhl637 {
		yyb637 = yyj637 > l
	} else {
		yyb637 = r.CheckBreak()
	}
	if yyb637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv642 := &x.Status
		yyv642.CodecDecodeSelf(d)
	}
	for {
		yyj637++
		if yyhl637 {
			yyb637 = yyj637 > l
		} else {
			yyb637 = r.CheckBreak()
		}
		if yyb637 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj637-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym643 := z.EncBinary()
		_ = yym643
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep644 := !z.EncBinary()
			yy2arr644 := z.EncBasicHandle().StructToArray
			var yyq644 [4]bool
			_, _, _ = yysep644, yyq644, yy2arr644
			const yyr644 bool = false
			yyq644[0] = x.Kind != ""
			yyq644[1] = x.APIVersion != ""
			yyq644[2] = true
			var yynn644 int
			if yyr644 || yy2arr644 {
				r.EncodeArrayStart(4)
			} else {
				yynn644 = 1
				for _, b := range yyq644 {
					if b {
						yynn644++
					}
				}
				r.EncodeMapStart(yynn644)
				yynn644 = 0
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq644[0] {
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq644[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq644[1] {
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq644[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq644[2] {
					yy652 := &x.ListMeta
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else if z.HasExtensions() && z.EncExt(yy652) {
					} else {
						z.EncFallback(yy652)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq644[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy654 := &x.ListMeta
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else if z.HasExtensions() && z.EncExt(yy654) {
					} else {
						z.EncFallback(yy654)
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym658 := z.EncBinary()
					_ = yym658
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym659 := z.DecBinary()
	_ = yym659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct660 := r.ContainerType()
		if yyct660 == codecSelferValueTypeMap1234 {
			yyl660 := r.ReadMapStart()
			if yyl660 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl660, d)
			}
		} else if yyct660 == codecSelferValueTypeArray1234 {
			yyl660 := r.ReadArrayStart()
			if yyl660 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys661Slc
	var yyhl661 bool = l >= 0
	for yyj661 := 0; ; yyj661++ {
		if yyhl661 {
			if yyj661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys661Slc = r.DecodeBytes(yys661Slc, true, true)
		yys661 := string(yys661Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys661 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv664 := &x.ListMeta
				yym665 := z.DecBinary()
				_ = yym665
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv664) {
				} else {
					z.DecFallback(yyv664, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv666 := &x.Items
				yym667 := z.DecBinary()
				_ = yym667
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv666), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys661)
		} // end switch yys661
	} // end for yyj661
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj668 int
	var yyb668 bool
	var yyhl668 bool = l >= 0
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv671 := &x.ListMeta
		yym672 := z.DecBinary()
		_ = yym672
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv671) {
		} else {
			z.DecFallback(yyv671, false)
		}
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv673 := &x.Items
		yym674 := z.DecBinary()
		_ = yym674
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv673), d)
		}
	}
	for {
		yyj668++
		if yyhl668 {
			yyb668 = yyj668 > l
		} else {
			yyb668 = r.CheckBreak()
		}
		if yyb668 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj668-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym675 := z.EncBinary()
		_ = yym675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep676 := !z.EncBinary()
			yy2arr676 := z.EncBasicHandle().StructToArray
			var yyq676 [3]bool
			_, _, _ = yysep676, yyq676, yy2arr676
			const yyr676 bool = false
			yyq676[0] = x.Backend != nil
			yyq676[1] = len(x.TLS) != 0
			yyq676[2] = len(x.Rules) != 0
			var yynn676 int
			if yyr676 || yy2arr676 {
				r.EncodeArrayStart(3)
			} else {
				yynn676 = 0
				for _, b := range yyq676 {
					if b {
						yynn676++
					}
				}
				r.EncodeMapStart(yynn676)
				yynn676 = 0
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq676[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq676[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq676[1] {
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym679 := z.EncBinary()
						_ = yym679
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq676[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tls"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym680 := z.EncBinary()
						_ = yym680
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq676[2] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym682 := z.EncBinary()
						_ = yym682
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq676[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym683 := z.EncBinary()
						_ = yym683
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym684 := z.DecBinary()
	_ = yym684
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct685 := r.ContainerType()
		if yyct685 == codecSelferValueTypeMap1234 {
			yyl685 := r.ReadMapStart()
			if yyl685 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl685, d)
			}
		} else if yyct685 == codecSelferValueTypeArray1234 {
			yyl685 := r.ReadArrayStart()
			if yyl685 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl685, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys686Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys686Slc
	var yyhl686 bool = l >= 0
	for yyj686 := 0; ; yyj686++ {
		if yyhl686 {
			if yyj686 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys686Slc = r.DecodeBytes(yys686Slc, true, true)
		yys686 := string(yys686Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys686 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "tls":
			if r.TryDecodeAsNil() {
				x.TLS = nil
			} else {
				yyv688 := &x.TLS
				yym689 := z.DecBinary()
				_ = yym689
				if false {
				} else {
					h.decSliceIngressTLS((*[]IngressTLS)(yyv688), d)
				}
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv690 := &x.Rules
				yym691 := z.DecBinary()
				_ = yym691
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv690), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys686)
		} // end switch yys686
	} // end for yyj686
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj692 int
	var yyb692 bool
	var yyhl692 bool = l >= 0
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TLS = nil
	} else {
		yyv694 := &x.TLS
		yym695 := z.DecBinary()
		_ = yym695
		if false {
		} else {
			h.decSliceIngressTLS((*[]IngressTLS)(yyv694), d)
		}
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv696 := &x.Rules
		yym697 := z.DecBinary()
		_ = yym697
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv696), d)
		}
	}
	for {
		yyj692++
		if yyhl692 {
			yyb692 = yyj692 > l
		} else {
			yyb692 = r.CheckBreak()
		}
		if yyb692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressTLS) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym698 := z.EncBinary()
		_ = yym698
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep699 := !z.EncBinary()
			yy2arr699 := z.EncBasicHandle().StructToArray
			var yyq699 [2]bool
			_, _, _ = yysep699, yyq699, yy2arr699
			const yyr699 bool = false
			yyq699[0] = len(x.Hosts) != 0
			yyq699[1] = x.SecretName != ""
			var yynn699 int
			if yyr699 || yy2arr699 {
				r.EncodeArrayStart(2)
			} else {
				yynn699 = 0
				for _, b := range yyq699 {
					if b {
						yynn699++
					}
				}
				r.EncodeMapStart(yynn699)
				yynn699 = 0
			}
			if yyr699 || yy2arr699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq699[0] {
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym701 := z.EncBinary()
						_ = yym701
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq699[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hosts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym702 := z.EncBinary()
						_ = yym702
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				}
			}
			if yyr699 || yy2arr699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq699[1] {
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq699[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr699 || yy2arr699 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressTLS) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym706 := z.DecBinary()
	_ = yym706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct707 := r.ContainerType()
		if yyct707 == codecSelferValueTypeMap1234 {
			yyl707 := r.ReadMapStart()
			if yyl707 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl707, d)
			}
		} else if yyct707 == codecSelferValueTypeArray1234 {
			yyl707 := r.ReadArrayStart()
			if yyl707 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl707, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressTLS) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys708Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys708Slc
	var yyhl708 bool = l >= 0
	for yyj708 := 0; ; yyj708++ {
		if yyhl708 {
			if yyj708 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys708Slc = r.DecodeBytes(yys708Slc, true, true)
		yys708 := string(yys708Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys708 {
		case "hosts":
			if r.TryDecodeAsNil() {
				x.Hosts = nil
			} else {
				yyv709 := &x.Hosts
				yym710 := z.DecBinary()
				_ = yym710
				if false {
				} else {
					z.F.DecSliceStringX(yyv709, false, d)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys708)
		} // end switch yys708
	} // end for yyj708
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressTLS) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj712 int
	var yyb712 bool
	var yyhl712 bool = l >= 0
	yyj712++
	if yyhl712 {
		yyb712 = yyj712 > l
	} else {
		yyb712 = r.CheckBreak()
	}
	if yyb712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hosts = nil
	} else {
		yyv713 := &x.Hosts
		yym714 := z.DecBinary()
		_ = yym714
		if false {
		} else {
			z.F.DecSliceStringX(yyv713, false, d)
		}
	}
	yyj712++
	if yyhl712 {
		yyb712 = yyj712 > l
	} else {
		yyb712 = r.CheckBreak()
	}
	if yyb712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj712++
		if yyhl712 {
			yyb712 = yyj712 > l
		} else {
			yyb712 = r.CheckBreak()
		}
		if yyb712 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj712-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym716 := z.EncBinary()
		_ = yym716
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep717 := !z.EncBinary()
			yy2arr717 := z.EncBasicHandle().StructToArray
			var yyq717 [1]bool
			_, _, _ = yysep717, yyq717, yy2arr717
			const yyr717 bool = false
			yyq717[0] = true
			var yynn717 int
			if yyr717 || yy2arr717 {
				r.EncodeArrayStart(1)
			} else {
				yynn717 = 0
				for _, b := range yyq717 {
					if b {
						yynn717++
					}
				}
				r.EncodeMapStart(yynn717)
				yynn717 = 0
			}
			if yyr717 || yy2arr717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq717[0] {
					yy719 := &x.LoadBalancer
					yy719.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq717[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy720 := &x.LoadBalancer
					yy720.CodecEncodeSelf(e)
				}
			}
			if yyr717 || yy2arr717 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym721 := z.DecBinary()
	_ = yym721
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct722 := r.ContainerType()
		if yyct722 == codecSelferValueTypeMap1234 {
			yyl722 := r.ReadMapStart()
			if yyl722 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl722, d)
			}
		} else if yyct722 == codecSelferValueTypeArray1234 {
			yyl722 := r.ReadArrayStart()
			if yyl722 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl722, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys723Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys723Slc
	var yyhl723 bool = l >= 0
	for yyj723 := 0; ; yyj723++ {
		if yyhl723 {
			if yyj723 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys723Slc = r.DecodeBytes(yys723Slc, true, true)
		yys723 := string(yys723Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys723 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv724 := &x.LoadBalancer
				yyv724.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys723)
		} // end switch yys723
	} // end for yyj723
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj725 int
	var yyb725 bool
	var yyhl725 bool = l >= 0
	yyj725++
	if yyhl725 {
		yyb725 = yyj725 > l
	} else {
		yyb725 = r.CheckBreak()
	}
	if yyb725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv726 := &x.LoadBalancer
		yyv726.CodecDecodeSelf(d)
	}
	for {
		yyj725++
		if yyhl725 {
			yyb725 = yyj725 > l
		} else {
			yyb725 = r.CheckBreak()
		}
		if yyb725 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj725-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym727 := z.EncBinary()
		_ = yym727
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep728 := !z.EncBinary()
			yy2arr728 := z.EncBasicHandle().StructToArray
			var yyq728 [2]bool
			_, _, _ = yysep728, yyq728, yy2arr728
			const yyr728 bool = false
			yyq728[0] = x.Host != ""
			yyq728[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn728 int
			if yyr728 || yy2arr728 {
				r.EncodeArrayStart(2)
			} else {
				yynn728 = 0
				for _, b := range yyq728 {
					if b {
						yynn728++
					}
				}
				r.EncodeMapStart(yynn728)
				yynn728 = 0
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq728[0] {
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq728[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn732 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn732 = true
				goto LABEL732
			}
		LABEL732:
			if yyr728 || yy2arr728 {
				if yyn732 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq728[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq728[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn732 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym733 := z.DecBinary()
	_ = yym733
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct734 := r.ContainerType()
		if yyct734 == codecSelferValueTypeMap1234 {
			yyl734 := r.ReadMapStart()
			if yyl734 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl734, d)
			}
		} else if yyct734 == codecSelferValueTypeArray1234 {
			yyl734 := r.ReadArrayStart()
			if yyl734 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl734, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys735Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys735Slc
	var yyhl735 bool = l >= 0
	for yyj735 := 0; ; yyj735++ {
		if yyhl735 {
			if yyj735 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys735Slc = r.DecodeBytes(yys735Slc, true, true)
		yys735 := string(yys735Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys735 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys735)
		} // end switch yys735
	} // end for yyj735
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj738 int
	var yyb738 bool
	var yyhl738 bool = l >= 0
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj738++
		if yyhl738 {
			yyb738 = yyj738 > l
		} else {
			yyb738 = r.CheckBreak()
		}
		if yyb738 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj738-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym741 := z.EncBinary()
		_ = yym741
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep742 := !z.EncBinary()
			yy2arr742 := z.EncBasicHandle().StructToArray
			var yyq742 [1]bool
			_, _, _ = yysep742, yyq742, yy2arr742
			const yyr742 bool = false
			yyq742[0] = x.HTTP != nil
			var yynn742 int
			if yyr742 || yy2arr742 {
				r.EncodeArrayStart(1)
			} else {
				yynn742 = 0
				for _, b := range yyq742 {
					if b {
						yynn742++
					}
				}
				r.EncodeMapStart(yynn742)
				yynn742 = 0
			}
			if yyr742 || yy2arr742 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq742[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq742[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr742 || yy2arr742 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym744 := z.DecBinary()
	_ = yym744
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct745 := r.ContainerType()
		if yyct745 == codecSelferValueTypeMap1234 {
			yyl745 := r.ReadMapStart()
			if yyl745 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl745, d)
			}
		} else if yyct745 == codecSelferValueTypeArray1234 {
			yyl745 := r.ReadArrayStart()
			if yyl745 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl745, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys746Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys746Slc
	var yyhl746 bool = l >= 0
	for yyj746 := 0; ; yyj746++ {
		if yyhl746 {
			if yyj746 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys746Slc = r.DecodeBytes(yys746Slc, true, true)
		yys746 := string(yys746Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys746 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys746)
		} // end switch yys746
	} // end for yyj746
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj748 int
	var yyb748 bool
	var yyhl748 bool = l >= 0
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj748++
		if yyhl748 {
			yyb748 = yyj748 > l
		} else {
			yyb748 = r.CheckBreak()
		}
		if yyb748 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj748-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym750 := z.EncBinary()
		_ = yym750
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep751 := !z.EncBinary()
			yy2arr751 := z.EncBasicHandle().StructToArray
			var yyq751 [1]bool
			_, _, _ = yysep751, yyq751, yy2arr751
			const yyr751 bool = false
			var yynn751 int
			if yyr751 || yy2arr751 {
				r.EncodeArrayStart(1)
			} else {
				yynn751 = 1
				for _, b := range yyq751 {
					if b {
						yynn751++
					}
				}
				r.EncodeMapStart(yynn751)
				yynn751 = 0
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym753 := z.EncBinary()
					_ = yym753
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym754 := z.EncBinary()
					_ = yym754
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym755 := z.DecBinary()
	_ = yym755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct756 := r.ContainerType()
		if yyct756 == codecSelferValueTypeMap1234 {
			yyl756 := r.ReadMapStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl756, d)
			}
		} else if yyct756 == codecSelferValueTypeArray1234 {
			yyl756 := r.ReadArrayStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys757Slc
	var yyhl757 bool = l >= 0
	for yyj757 := 0; ; yyj757++ {
		if yyhl757 {
			if yyj757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys757Slc = r.DecodeBytes(yys757Slc, true, true)
		yys757 := string(yys757Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys757 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv758 := &x.Paths
				yym759 := z.DecBinary()
				_ = yym759
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv758), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys757)
		} // end switch yys757
	} // end for yyj757
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj760 int
	var yyb760 bool
	var yyhl760 bool = l >= 0
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv761 := &x.Paths
		yym762 := z.DecBinary()
		_ = yym762
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv761), d)
		}
	}
	for {
		yyj760++
		if yyhl760 {
			yyb760 = yyj760 > l
		} else {
			yyb760 = r.CheckBreak()
		}
		if yyb760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym763 := z.EncBinary()
		_ = yym763
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep764 := !z.EncBinary()
			yy2arr764 := z.EncBasicHandle().StructToArray
			var yyq764 [2]bool
			_, _, _ = yysep764, yyq764, yy2arr764
			const yyr764 bool = false
			yyq764[0] = x.Path != ""
			var yynn764 int
			if yyr764 || yy2arr764 {
				r.EncodeArrayStart(2)
			} else {
				yynn764 = 1
				for _, b := range yyq764 {
					if b {
						yynn764++
					}
				}
				r.EncodeMapStart(yynn764)
				yynn764 = 0
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq764[0] {
					yym766 := z.EncBinary()
					_ = yym766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq764[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy769 := &x.Backend
				yy769.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy770 := &x.Backend
				yy770.CodecEncodeSelf(e)
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym771 := z.DecBinary()
	_ = yym771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct772 := r.ContainerType()
		if yyct772 == codecSelferValueTypeMap1234 {
			yyl772 := r.ReadMapStart()
			if yyl772 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl772, d)
			}
		} else if yyct772 == codecSelferValueTypeArray1234 {
			yyl772 := r.ReadArrayStart()
			if yyl772 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl772, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys773Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys773Slc
	var yyhl773 bool = l >= 0
	for yyj773 := 0; ; yyj773++ {
		if yyhl773 {
			if yyj773 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys773Slc = r.DecodeBytes(yys773Slc, true, true)
		yys773 := string(yys773Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys773 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv775 := &x.Backend
				yyv775.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys773)
		} // end switch yys773
	} // end for yyj773
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj776 int
	var yyb776 bool
	var yyhl776 bool = l >= 0
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv778 := &x.Backend
		yyv778.CodecDecodeSelf(d)
	}
	for {
		yyj776++
		if yyhl776 {
			yyb776 = yyj776 > l
		} else {
			yyb776 = r.CheckBreak()
		}
		if yyb776 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj776-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym779 := z.EncBinary()
		_ = yym779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep780 := !z.EncBinary()
			yy2arr780 := z.EncBasicHandle().StructToArray
			var yyq780 [2]bool
			_, _, _ = yysep780, yyq780, yy2arr780
			const yyr780 bool = false
			var yynn780 int
			if yyr780 || yy2arr780 {
				r.EncodeArrayStart(2)
			} else {
				yynn780 = 2
				for _, b := range yyq780 {
					if b {
						yynn780++
					}
				}
				r.EncodeMapStart(yynn780)
				yynn780 = 0
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym782 := z.EncBinary()
				_ = yym782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym783 := z.EncBinary()
				_ = yym783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy785 := &x.ServicePort
				yym786 := z.EncBinary()
				_ = yym786
				if false {
				} else if z.HasExtensions() && z.EncExt(yy785) {
				} else if !yym786 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy785)
				} else {
					z.EncFallback(yy785)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy787 := &x.ServicePort
				yym788 := z.EncBinary()
				_ = yym788
				if false {
				} else if z.HasExtensions() && z.EncExt(yy787) {
				} else if !yym788 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy787)
				} else {
					z.EncFallback(yy787)
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym789 := z.DecBinary()
	_ = yym789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct790 := r.ContainerType()
		if yyct790 == codecSelferValueTypeMap1234 {
			yyl790 := r.ReadMapStart()
			if yyl790 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl790, d)
			}
		} else if yyct790 == codecSelferValueTypeArray1234 {
			yyl790 := r.ReadArrayStart()
			if yyl790 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys791Slc
	var yyhl791 bool = l >= 0
	for yyj791 := 0; ; yyj791++ {
		if yyhl791 {
			if yyj791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys791Slc = r.DecodeBytes(yys791Slc, true, true)
		yys791 := string(yys791Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys791 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg5_intstr.IntOrString{}
			} else {
				yyv793 := &x.ServicePort
				yym794 := z.DecBinary()
				_ = yym794
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv793) {
				} else if !yym794 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv793)
				} else {
					z.DecFallback(yyv793, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys791)
		} // end switch yys791
	} // end for yyj791
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj795 int
	var yyb795 bool
	var yyhl795 bool = l >= 0
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg5_intstr.IntOrString{}
	} else {
		yyv797 := &x.ServicePort
		yym798 := z.DecBinary()
		_ = yym798
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv797) {
		} else if !yym798 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv797)
		} else {
			z.DecFallback(yyv797, false)
		}
	}
	for {
		yyj795++
		if yyhl795 {
			yyb795 = yyj795 > l
		} else {
			yyb795 = r.CheckBreak()
		}
		if yyb795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym799 := z.EncBinary()
		_ = yym799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep800 := !z.EncBinary()
			yy2arr800 := z.EncBasicHandle().StructToArray
			var yyq800 [5]bool
			_, _, _ = yysep800, yyq800, yy2arr800
			const yyr800 bool = false
			yyq800[0] = x.Kind != ""
			yyq800[1] = x.APIVersion != ""
			yyq800[2] = true
			yyq800[3] = true
			yyq800[4] = true
			var yynn800 int
			if yyr800 || yy2arr800 {
				r.EncodeArrayStart(5)
			} else {
				yynn800 = 0
				for _, b := range yyq800 {
					if b {
						yynn800++
					}
				}
				r.EncodeMapStart(yynn800)
				yynn800 = 0
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[0] {
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq800[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[1] {
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq800[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[2] {
					yy808 := &x.ObjectMeta
					yy808.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq800[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy809 := &x.ObjectMeta
					yy809.CodecEncodeSelf(e)
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[3] {
					yy811 := &x.Spec
					yy811.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq800[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy812 := &x.Spec
					yy812.CodecEncodeSelf(e)
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[4] {
					yy814 := &x.Status
					yy814.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq800[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy815 := &x.Status
					yy815.CodecEncodeSelf(e)
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym816 := z.DecBinary()
	_ = yym816
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct817 := r.ContainerType()
		if yyct817 == codecSelferValueTypeMap1234 {
			yyl817 := r.ReadMapStart()
			if yyl817 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl817, d)
			}
		} else if yyct817 == codecSelferValueTypeArray1234 {
			yyl817 := r.ReadArrayStart()
			if yyl817 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl817, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys818Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys818Slc
	var yyhl818 bool = l >= 0
	for yyj818 := 0; ; yyj818++ {
		if yyhl818 {
			if yyj818 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys818Slc = r.DecodeBytes(yys818Slc, true, true)
		yys818 := string(yys818Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys818 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv821 := &x.ObjectMeta
				yyv821.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv822 := &x.Spec
				yyv822.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv823 := &x.Status
				yyv823.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys818)
		} // end switch yys818
	} // end for yyj818
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj824 int
	var yyb824 bool
	var yyhl824 bool = l >= 0
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv827 := &x.ObjectMeta
		yyv827.CodecDecodeSelf(d)
	}
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv828 := &x.Spec
		yyv828.CodecDecodeSelf(d)
	}
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv829 := &x.Status
		yyv829.CodecDecodeSelf(d)
	}
	for {
		yyj824++
		if yyhl824 {
			yyb824 = yyj824 > l
		} else {
			yyb824 = r.CheckBreak()
		}
		if yyb824 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj824-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym830 := z.EncBinary()
		_ = yym830
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep831 := !z.EncBinary()
			yy2arr831 := z.EncBasicHandle().StructToArray
			var yyq831 [4]bool
			_, _, _ = yysep831, yyq831, yy2arr831
			const yyr831 bool = false
			yyq831[0] = x.Kind != ""
			yyq831[1] = x.APIVersion != ""
			yyq831[2] = true
			var yynn831 int
			if yyr831 || yy2arr831 {
				r.EncodeArrayStart(4)
			} else {
				yynn831 = 1
				for _, b := range yyq831 {
					if b {
						yynn831++
					}
				}
				r.EncodeMapStart(yynn831)
				yynn831 = 0
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq831[0] {
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq831[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq831[1] {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq831[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq831[2] {
					yy839 := &x.ListMeta
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else if z.HasExtensions() && z.EncExt(yy839) {
					} else {
						z.EncFallback(yy839)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq831[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy841 := &x.ListMeta
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else if z.HasExtensions() && z.EncExt(yy841) {
					} else {
						z.EncFallback(yy841)
					}
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym844 := z.EncBinary()
					_ = yym844
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym846 := z.DecBinary()
	_ = yym846
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct847 := r.ContainerType()
		if yyct847 == codecSelferValueTypeMap1234 {
			yyl847 := r.ReadMapStart()
			if yyl847 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl847, d)
			}
		} else if yyct847 == codecSelferValueTypeArray1234 {
			yyl847 := r.ReadArrayStart()
			if yyl847 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl847, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys848Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys848Slc
	var yyhl848 bool = l >= 0
	for yyj848 := 0; ; yyj848++ {
		if yyhl848 {
			if yyj848 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys848Slc = r.DecodeBytes(yys848Slc, true, true)
		yys848 := string(yys848Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys848 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv851 := &x.ListMeta
				yym852 := z.DecBinary()
				_ = yym852
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv851) {
				} else {
					z.DecFallback(yyv851, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv853 := &x.Items
				yym854 := z.DecBinary()
				_ = yym854
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv853), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys848)
		} // end switch yys848
	} // end for yyj848
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj855 int
	var yyb855 bool
	var yyhl855 bool = l >= 0
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv858 := &x.ListMeta
		yym859 := z.DecBinary()
		_ = yym859
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv858) {
		} else {
			z.DecFallback(yyv858, false)
		}
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv860 := &x.Items
		yym861 := z.DecBinary()
		_ = yym861
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv860), d)
		}
	}
	for {
		yyj855++
		if yyhl855 {
			yyb855 = yyj855 > l
		} else {
			yyb855 = r.CheckBreak()
		}
		if yyb855 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj855-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym862 := z.EncBinary()
		_ = yym862
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep863 := !z.EncBinary()
			yy2arr863 := z.EncBasicHandle().StructToArray
			var yyq863 [4]bool
			_, _, _ = yysep863, yyq863, yy2arr863
			const yyr863 bool = false
			yyq863[1] = x.MinReadySeconds != 0
			yyq863[2] = x.Selector != nil
			yyq863[3] = true
			var yynn863 int
			if yyr863 || yy2arr863 {
				r.EncodeArrayStart(4)
			} else {
				yynn863 = 1
				for _, b := range yyq863 {
					if b {
						yynn863++
					}
				}
				r.EncodeMapStart(yynn863)
				yynn863 = 0
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym866 := z.EncBinary()
				_ = yym866
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq863[1] {
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq863[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq863[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym871 := z.EncBinary()
						_ = yym871
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq863[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym872 := z.EncBinary()
						_ = yym872
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq863[3] {
					yy874 := &x.Template
					yy874.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq863[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy875 := &x.Template
					yy875.CodecEncodeSelf(e)
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym876 := z.DecBinary()
	_ = yym876
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct877 := r.ContainerType()
		if yyct877 == codecSelferValueTypeMap1234 {
			yyl877 := r.ReadMapStart()
			if yyl877 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl877, d)
			}
		} else if yyct877 == codecSelferValueTypeArray1234 {
			yyl877 := r.ReadArrayStart()
			if yyl877 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl877, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys878Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys878Slc
	var yyhl878 bool = l >= 0
	for yyj878 := 0; ; yyj878++ {
		if yyhl878 {
			if yyj878 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys878Slc = r.DecodeBytes(yys878Slc, true, true)
		yys878 := string(yys878Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys878 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym882 := z.DecBinary()
				_ = yym882
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv883 := &x.Template
				yyv883.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys878)
		} // end switch yys878
	} // end for yyj878
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj884 int
	var yyb884 bool
	var yyhl884 bool = l >= 0
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym888 := z.DecBinary()
		_ = yym888
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv889 := &x.Template
		yyv889.CodecDecodeSelf(d)
	}
	for {
		yyj884++
		if yyhl884 {
			yyb884 = yyj884 > l
		} else {
			yyb884 = r.CheckBreak()
		}
		if yyb884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym890 := z.EncBinary()
		_ = yym890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep891 := !z.EncBinary()
			yy2arr891 := z.EncBasicHandle().StructToArray
			var yyq891 [6]bool
			_, _, _ = yysep891, yyq891, yy2arr891
			const yyr891 bool = false
			yyq891[1] = x.FullyLabeledReplicas != 0
			yyq891[2] = x.ReadyReplicas != 0
			yyq891[3] = x.AvailableReplicas != 0
			yyq891[4] = x.ObservedGeneration != 0
			yyq891[5] = len(x.Conditions) != 0
			var yynn891 int
			if yyr891 || yy2arr891 {
				r.EncodeArrayStart(6)
			} else {
				yynn891 = 1
				for _, b := range yyq891 {
					if b {
						yynn891++
					}
				}
				r.EncodeMapStart(yynn891)
				yynn891 = 0
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym893 := z.EncBinary()
				_ = yym893
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym894 := z.EncBinary()
				_ = yym894
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[1] {
					yym896 := z.EncBinary()
					_ = yym896
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq891[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[2] {
					yym899 := z.EncBinary()
					_ = yym899
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq891[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym900 := z.EncBinary()
					_ = yym900
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[3] {
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq891[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym903 := z.EncBinary()
					_ = yym903
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[4] {
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq891[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym908 := z.EncBinary()
						_ = yym908
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq891[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym909 := z.EncBinary()
						_ = yym909
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym910 := z.DecBinary()
	_ = yym910
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct911 := r.ContainerType()
		if yyct911 == codecSelferValueTypeMap1234 {
			yyl911 := r.ReadMapStart()
			if yyl911 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl911, d)
			}
		} else if yyct911 == codecSelferValueTypeArray1234 {
			yyl911 := r.ReadArrayStart()
			if yyl911 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl911, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys912Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys912Slc
	var yyhl912 bool = l >= 0
	for yyj912 := 0; ; yyj912++ {
		if yyhl912 {
			if yyj912 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys912Slc = r.DecodeBytes(yys912Slc, true, true)
		yys912 := string(yys912Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys912 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv918 := &x.Conditions
				yym919 := z.DecBinary()
				_ = yym919
				if false {
				} else {
					h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv918), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys912)
		} // end switch yys912
	} // end for yyj912
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj920 int
	var yyb920 bool
	var yyhl920 bool = l >= 0
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv926 := &x.Conditions
		yym927 := z.DecBinary()
		_ = yym927
		if false {
		} else {
			h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv926), d)
		}
	}
	for {
		yyj920++
		if yyhl920 {
			yyb920 = yyj920 > l
		} else {
			yyb920 = r.CheckBreak()
		}
		if yyb920 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj920-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicaSetConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym928 := z.EncBinary()
	_ = yym928
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicaSetConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym929 := z.DecBinary()
	_ = yym929
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSetCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym930 := z.EncBinary()
		_ = yym930
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep931 := !z.EncBinary()
			yy2arr931 := z.EncBasicHandle().StructToArray
			var yyq931 [6]bool
			_, _, _ = yysep931, yyq931, yy2arr931
			const yyr931 bool = false
			yyq931[2] = true
			yyq931[3] = true
			yyq931[4] = x.Reason != ""
			yyq931[5] = x.Message != ""
			var yynn931 int
			if yyr931 || yy2arr931 {
				r.EncodeArrayStart(6)
			} else {
				yynn931 = 2
				for _, b := range yyq931 {
					if b {
						yynn931++
					}
				}
				r.EncodeMapStart(yynn931)
				yynn931 = 0
			}
			if yyr931 || yy2arr931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr931 || yy2arr931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym934 := z.EncBinary()
				_ = yym934
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr931 || yy2arr931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq931[2] {
					yy937 := &x.LastProbeTime
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else if z.HasExtensions() && z.EncExt(yy937) {
					} else if yym938 {
						z.EncBinaryMarshal(yy937)
					} else if !yym938 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy937)
					} else {
						z.EncFallback(yy937)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq931[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy939 := &x.LastProbeTime
					yym940 := z.EncBinary()
					_ = yym940
					if false {
					} else if z.HasExtensions() && z.EncExt(yy939) {
					} else if yym940 {
						z.EncBinaryMarshal(yy939)
					} else if !yym940 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy939)
					} else {
						z.EncFallback(yy939)
					}
				}
			}
			if yyr931 || yy2arr931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq931[3] {
					yy942 := &x.LastTransitionTime
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else if z.HasExtensions() && z.EncExt(yy942) {
					} else if yym943 {
						z.EncBinaryMarshal(yy942)
					} else if !yym943 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy942)
					} else {
						z.EncFallback(yy942)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq931[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy944 := &x.LastTransitionTime
					yym945 := z.EncBinary()
					_ = yym945
					if false {
					} else if z.HasExtensions() && z.EncExt(yy944) {
					} else if yym945 {
						z.EncBinaryMarshal(yy944)
					} else if !yym945 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy944)
					} else {
						z.EncFallback(yy944)
					}
				}
			}
			if yyr931 || yy2arr931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq931[4] {
					yym947 := z.EncBinary()
					_ = yym947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq931[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym948 := z.EncBinary()
					_ = yym948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr931 || yy2arr931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq931[5] {
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq931[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr931 || yy2arr931 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym952 := z.DecBinary()
	_ = yym952
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct953 := r.ContainerType()
		if yyct953 == codecSelferValueTypeMap1234 {
			yyl953 := r.ReadMapStart()
			if yyl953 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl953, d)
			}
		} else if yyct953 == codecSelferValueTypeArray1234 {
			yyl953 := r.ReadArrayStart()
			if yyl953 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl953, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys954Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys954Slc
	var yyhl954 bool = l >= 0
	for yyj954 := 0; ; yyj954++ {
		if yyhl954 {
			if yyj954 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys954Slc = r.DecodeBytes(yys954Slc, true, true)
		yys954 := string(yys954Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys954 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicaSetConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv957 := &x.LastProbeTime
				yym958 := z.DecBinary()
				_ = yym958
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv957) {
				} else if yym958 {
					z.DecBinaryUnmarshal(yyv957)
				} else if !yym958 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv957)
				} else {
					z.DecFallback(yyv957, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv959 := &x.LastTransitionTime
				yym960 := z.DecBinary()
				_ = yym960
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv959) {
				} else if yym960 {
					z.DecBinaryUnmarshal(yyv959)
				} else if !yym960 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv959)
				} else {
					z.DecFallback(yyv959, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys954)
		} // end switch yys954
	} // end for yyj954
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj963 int
	var yyb963 bool
	var yyhl963 bool = l >= 0
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicaSetConditionType(r.DecodeString())
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv966 := &x.LastProbeTime
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv966) {
		} else if yym967 {
			z.DecBinaryUnmarshal(yyv966)
		} else if !yym967 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv966)
		} else {
			z.DecFallback(yyv966, false)
		}
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv968 := &x.LastTransitionTime
		yym969 := z.DecBinary()
		_ = yym969
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv968) {
		} else if yym969 {
			z.DecBinaryUnmarshal(yyv968)
		} else if !yym969 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv968)
		} else {
			z.DecFallback(yyv968, false)
		}
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj963++
		if yyhl963 {
			yyb963 = yyj963 > l
		} else {
			yyb963 = r.CheckBreak()
		}
		if yyb963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym972 := z.EncBinary()
		_ = yym972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep973 := !z.EncBinary()
			yy2arr973 := z.EncBasicHandle().StructToArray
			var yyq973 [4]bool
			_, _, _ = yysep973, yyq973, yy2arr973
			const yyr973 bool = false
			yyq973[0] = x.Kind != ""
			yyq973[1] = x.APIVersion != ""
			yyq973[2] = true
			yyq973[3] = true
			var yynn973 int
			if yyr973 || yy2arr973 {
				r.EncodeArrayStart(4)
			} else {
				yynn973 = 0
				for _, b := range yyq973 {
					if b {
						yynn973++
					}
				}
				r.EncodeMapStart(yynn973)
				yynn973 = 0
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[0] {
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq973[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym976 := z.EncBinary()
					_ = yym976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[1] {
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq973[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym979 := z.EncBinary()
					_ = yym979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[2] {
					yy981 := &x.ObjectMeta
					yy981.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq973[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy982 := &x.ObjectMeta
					yy982.CodecEncodeSelf(e)
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[3] {
					yy984 := &x.Spec
					yy984.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq973[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy985 := &x.Spec
					yy985.CodecEncodeSelf(e)
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym986 := z.DecBinary()
	_ = yym986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct987 := r.ContainerType()
		if yyct987 == codecSelferValueTypeMap1234 {
			yyl987 := r.ReadMapStart()
			if yyl987 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl987, d)
			}
		} else if yyct987 == codecSelferValueTypeArray1234 {
			yyl987 := r.ReadArrayStart()
			if yyl987 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl987, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys988Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys988Slc
	var yyhl988 bool = l >= 0
	for yyj988 := 0; ; yyj988++ {
		if yyhl988 {
			if yyj988 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys988Slc = r.DecodeBytes(yys988Slc, true, true)
		yys988 := string(yys988Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys988 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv991 := &x.ObjectMeta
				yyv991.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSecurityPolicySpec{}
			} else {
				yyv992 := &x.Spec
				yyv992.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys988)
		} // end switch yys988
	} // end for yyj988
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj993 int
	var yyb993 bool
	var yyhl993 bool = l >= 0
	yyj993++
	if yyhl993 {
		yyb993 = yyj993 > l
	} else {
		yyb993 = r.CheckBreak()
	}
	if yyb993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj993++
	if yyhl993 {
		yyb993 = yyj993 > l
	} else {
		yyb993 = r.CheckBreak()
	}
	if yyb993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj993++
	if yyhl993 {
		yyb993 = yyj993 > l
	} else {
		yyb993 = r.CheckBreak()
	}
	if yyb993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv996 := &x.ObjectMeta
		yyv996.CodecDecodeSelf(d)
	}
	yyj993++
	if yyhl993 {
		yyb993 = yyj993 > l
	} else {
		yyb993 = r.CheckBreak()
	}
	if yyb993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSecurityPolicySpec{}
	} else {
		yyv997 := &x.Spec
		yyv997.CodecDecodeSelf(d)
	}
	for {
		yyj993++
		if yyhl993 {
			yyb993 = yyj993 > l
		} else {
			yyb993 = r.CheckBreak()
		}
		if yyb993 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj993-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym998 := z.EncBinary()
		_ = yym998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep999 := !z.EncBinary()
			yy2arr999 := z.EncBasicHandle().StructToArray
			var yyq999 [14]bool
			_, _, _ = yysep999, yyq999, yy2arr999
			const yyr999 bool = false
			yyq999[0] = x.Privileged != false
			yyq999[1] = len(x.DefaultAddCapabilities) != 0
			yyq999[2] = len(x.RequiredDropCapabilities) != 0
			yyq999[3] = len(x.AllowedCapabilities) != 0
			yyq999[4] = len(x.Volumes) != 0
			yyq999[5] = x.HostNetwork != false
			yyq999[6] = len(x.HostPorts) != 0
			yyq999[7] = x.HostPID != false
			yyq999[8] = x.HostIPC != false
			yyq999[13] = x.ReadOnlyRootFilesystem != false
			var yynn999 int
			if yyr999 || yy2arr999 {
				r.EncodeArrayStart(14)
			} else {
				yynn999 = 4
				for _, b := range yyq999 {
					if b {
						yynn999++
					}
				}
				r.EncodeMapStart(yynn999)
				yynn999 = 0
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq999[0] {
					yym1001 := z.EncBinary()
					_ = yym1001
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq999[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1002 := z.EncBinary()
					_ = yym1002
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq999[1] {
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1004 := z.EncBinary()
						_ = yym1004
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq999[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultAddCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1005 := z.EncBinary()
						_ = yym1005
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq999[2] {
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1007 := z.EncBinary()
						_ = yym1007
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq999[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDropCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1008 := z.EncBinary()
						_ = yym1008
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq999[3] {
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1010 := z.EncBinary()
						_ = yym1010
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.AllowedCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq999[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allowedCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1011 := z.EncBinary()
						_ = yym1011
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.AllowedCapabilities), e)
						}
					}
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq999[4] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1013 := z.EncBinary()
						_ = yym1013
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq999[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1014 := z.EncBinary()
						_ = yym1014
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq999[5] {
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq999[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq999[6] {
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1019 := z.EncBinary()
						_ = yym1019
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq999[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPorts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1020 := z.EncBinary()
						_ = yym1020
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq999[7] {
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq999[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq999[8] {
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq999[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1028 := &x.SELinux
				yy1028.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("seLinux"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1029 := &x.SELinux
				yy1029.CodecEncodeSelf(e)
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1031 := &x.RunAsUser
				yy1031.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1032 := &x.RunAsUser
				yy1032.CodecEncodeSelf(e)
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1034 := &x.SupplementalGroups
				yy1034.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1035 := &x.SupplementalGroups
				yy1035.CodecEncodeSelf(e)
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1037 := &x.FSGroup
				yy1037.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1038 := &x.FSGroup
				yy1038.CodecEncodeSelf(e)
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq999[13] {
					yym1040 := z.EncBinary()
					_ = yym1040
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq999[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1041 := z.EncBinary()
					_ = yym1041
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1042 := z.DecBinary()
	_ = yym1042
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1043 := r.ContainerType()
		if yyct1043 == codecSelferValueTypeMap1234 {
			yyl1043 := r.ReadMapStart()
			if yyl1043 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1043, d)
			}
		} else if yyct1043 == codecSelferValueTypeArray1234 {
			yyl1043 := r.ReadArrayStart()
			if yyl1043 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1043, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1044Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1044Slc
	var yyhl1044 bool = l >= 0
	for yyj1044 := 0; ; yyj1044++ {
		if yyhl1044 {
			if yyj1044 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1044Slc = r.DecodeBytes(yys1044Slc, true, true)
		yys1044 := string(yys1044Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1044 {
		case "privileged":
			if r.TryDecodeAsNil() {
				x.Privileged = false
			} else {
				x.Privileged = bool(r.DecodeBool())
			}
		case "defaultAddCapabilities":
			if r.TryDecodeAsNil() {
				x.DefaultAddCapabilities = nil
			} else {
				yyv1046 := &x.DefaultAddCapabilities
				yym1047 := z.DecBinary()
				_ = yym1047
				if false {
				} else {
					h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1046), d)
				}
			}
		case "requiredDropCapabilities":
			if r.TryDecodeAsNil() {
				x.RequiredDropCapabilities = nil
			} else {
				yyv1048 := &x.RequiredDropCapabilities
				yym1049 := z.DecBinary()
				_ = yym1049
				if false {
				} else {
					h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1048), d)
				}
			}
		case "allowedCapabilities":
			if r.TryDecodeAsNil() {
				x.AllowedCapabilities = nil
			} else {
				yyv1050 := &x.AllowedCapabilities
				yym1051 := z.DecBinary()
				_ = yym1051
				if false {
				} else {
					h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1050), d)
				}
			}
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1052 := &x.Volumes
				yym1053 := z.DecBinary()
				_ = yym1053
				if false {
				} else {
					h.decSliceFSType((*[]FSType)(yyv1052), d)
				}
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPorts":
			if r.TryDecodeAsNil() {
				x.HostPorts = nil
			} else {
				yyv1055 := &x.HostPorts
				yym1056 := z.DecBinary()
				_ = yym1056
				if false {
				} else {
					h.decSliceHostPortRange((*[]HostPortRange)(yyv1055), d)
				}
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinux":
			if r.TryDecodeAsNil() {
				x.SELinux = SELinuxStrategyOptions{}
			} else {
				yyv1059 := &x.SELinux
				yyv1059.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				x.RunAsUser = RunAsUserStrategyOptions{}
			} else {
				yyv1060 := &x.RunAsUser
				yyv1060.CodecDecodeSelf(d)
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
			} else {
				yyv1061 := &x.SupplementalGroups
				yyv1061.CodecDecodeSelf(d)
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				x.FSGroup = FSGroupStrategyOptions{}
			} else {
				yyv1062 := &x.FSGroup
				yyv1062.CodecDecodeSelf(d)
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				x.ReadOnlyRootFilesystem = false
			} else {
				x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1044)
		} // end switch yys1044
	} // end for yyj1044
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1064 int
	var yyb1064 bool
	var yyhl1064 bool = l >= 0
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Privileged = false
	} else {
		x.Privileged = bool(r.DecodeBool())
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultAddCapabilities = nil
	} else {
		yyv1066 := &x.DefaultAddCapabilities
		yym1067 := z.DecBinary()
		_ = yym1067
		if false {
		} else {
			h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1066), d)
		}
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDropCapabilities = nil
	} else {
		yyv1068 := &x.RequiredDropCapabilities
		yym1069 := z.DecBinary()
		_ = yym1069
		if false {
		} else {
			h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1068), d)
		}
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AllowedCapabilities = nil
	} else {
		yyv1070 := &x.AllowedCapabilities
		yym1071 := z.DecBinary()
		_ = yym1071
		if false {
		} else {
			h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1070), d)
		}
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1072 := &x.Volumes
		yym1073 := z.DecBinary()
		_ = yym1073
		if false {
		} else {
			h.decSliceFSType((*[]FSType)(yyv1072), d)
		}
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPorts = nil
	} else {
		yyv1075 := &x.HostPorts
		yym1076 := z.DecBinary()
		_ = yym1076
		if false {
		} else {
			h.decSliceHostPortRange((*[]HostPortRange)(yyv1075), d)
		}
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SELinux = SELinuxStrategyOptions{}
	} else {
		yyv1079 := &x.SELinux
		yyv1079.CodecDecodeSelf(d)
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RunAsUser = RunAsUserStrategyOptions{}
	} else {
		yyv1080 := &x.RunAsUser
		yyv1080.CodecDecodeSelf(d)
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
	} else {
		yyv1081 := &x.SupplementalGroups
		yyv1081.CodecDecodeSelf(d)
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSGroup = FSGroupStrategyOptions{}
	} else {
		yyv1082 := &x.FSGroup
		yyv1082.CodecDecodeSelf(d)
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnlyRootFilesystem = false
	} else {
		x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
	}
	for {
		yyj1064++
		if yyhl1064 {
			yyb1064 = yyj1064 > l
		} else {
			yyb1064 = r.CheckBreak()
		}
		if yyb1064 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1064-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HostPortRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1084 := z.EncBinary()
		_ = yym1084
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1085 := !z.EncBinary()
			yy2arr1085 := z.EncBasicHandle().StructToArray
			var yyq1085 [2]bool
			_, _, _ = yysep1085, yyq1085, yy2arr1085
			const yyr1085 bool = false
			var yynn1085 int
			if yyr1085 || yy2arr1085 {
				r.EncodeArrayStart(2)
			} else {
				yynn1085 = 2
				for _, b := range yyq1085 {
					if b {
						yynn1085++
					}
				}
				r.EncodeMapStart(yynn1085)
				yynn1085 = 0
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1087 := z.EncBinary()
				_ = yym1087
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1088 := z.EncBinary()
				_ = yym1088
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1090 := z.EncBinary()
				_ = yym1090
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1091 := z.EncBinary()
				_ = yym1091
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPortRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1092 := z.DecBinary()
	_ = yym1092
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1093 := r.ContainerType()
		if yyct1093 == codecSelferValueTypeMap1234 {
			yyl1093 := r.ReadMapStart()
			if yyl1093 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1093, d)
			}
		} else if yyct1093 == codecSelferValueTypeArray1234 {
			yyl1093 := r.ReadArrayStart()
			if yyl1093 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1093, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPortRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1094Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1094Slc
	var yyhl1094 bool = l >= 0
	for yyj1094 := 0; ; yyj1094++ {
		if yyhl1094 {
			if yyj1094 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1094Slc = r.DecodeBytes(yys1094Slc, true, true)
		yys1094 := string(yys1094Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1094 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1094)
		} // end switch yys1094
	} // end for yyj1094
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPortRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1097 int
	var yyb1097 bool
	var yyhl1097 bool = l >= 0
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1097++
		if yyhl1097 {
			yyb1097 = yyj1097 > l
		} else {
			yyb1097 = r.CheckBreak()
		}
		if yyb1097 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1097-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1100 := z.EncBinary()
	_ = yym1100
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1101 := z.DecBinary()
	_ = yym1101
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SELinuxStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1102 := z.EncBinary()
		_ = yym1102
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1103 := !z.EncBinary()
			yy2arr1103 := z.EncBasicHandle().StructToArray
			var yyq1103 [2]bool
			_, _, _ = yysep1103, yyq1103, yy2arr1103
			const yyr1103 bool = false
			yyq1103[1] = x.SELinuxOptions != nil
			var yynn1103 int
			if yyr1103 || yy2arr1103 {
				r.EncodeArrayStart(2)
			} else {
				yynn1103 = 1
				for _, b := range yyq1103 {
					if b {
						yynn1103++
					}
				}
				r.EncodeMapStart(yynn1103)
				yynn1103 = 0
			}
			if yyr1103 || yy2arr1103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1103 || yy2arr1103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1103[1] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1103[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1103 || yy2arr1103 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1106 := z.DecBinary()
	_ = yym1106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1107 := r.ContainerType()
		if yyct1107 == codecSelferValueTypeMap1234 {
			yyl1107 := r.ReadMapStart()
			if yyl1107 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1107, d)
			}
		} else if yyct1107 == codecSelferValueTypeArray1234 {
			yyl1107 := r.ReadArrayStart()
			if yyl1107 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1108Slc
	var yyhl1108 bool = l >= 0
	for yyj1108 := 0; ; yyj1108++ {
		if yyhl1108 {
			if yyj1108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1108Slc = r.DecodeBytes(yys1108Slc, true, true)
		yys1108 := string(yys1108Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1108 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SELinuxStrategy(r.DecodeString())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(pkg2_api.SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1108)
		} // end switch yys1108
	} // end for yyj1108
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1111 int
	var yyb1111 bool
	var yyhl1111 bool = l >= 0
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SELinuxStrategy(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(pkg2_api.SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	for {
		yyj1111++
		if yyhl1111 {
			yyb1111 = yyj1111 > l
		} else {
			yyb1111 = r.CheckBreak()
		}
		if yyb1111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SELinuxStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1114 := z.EncBinary()
	_ = yym1114
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SELinuxStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1115 := z.DecBinary()
	_ = yym1115
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RunAsUserStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1116 := z.EncBinary()
		_ = yym1116
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1117 := !z.EncBinary()
			yy2arr1117 := z.EncBasicHandle().StructToArray
			var yyq1117 [2]bool
			_, _, _ = yysep1117, yyq1117, yy2arr1117
			const yyr1117 bool = false
			yyq1117[1] = len(x.Ranges) != 0
			var yynn1117 int
			if yyr1117 || yy2arr1117 {
				r.EncodeArrayStart(2)
			} else {
				yynn1117 = 1
				for _, b := range yyq1117 {
					if b {
						yynn1117++
					}
				}
				r.EncodeMapStart(yynn1117)
				yynn1117 = 0
			}
			if yyr1117 || yy2arr1117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1117 || yy2arr1117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1117[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1120 := z.EncBinary()
						_ = yym1120
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1117[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1121 := z.EncBinary()
						_ = yym1121
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1117 || yy2arr1117 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RunAsUserStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1122 := z.DecBinary()
	_ = yym1122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1123 := r.ContainerType()
		if yyct1123 == codecSelferValueTypeMap1234 {
			yyl1123 := r.ReadMapStart()
			if yyl1123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1123, d)
			}
		} else if yyct1123 == codecSelferValueTypeArray1234 {
			yyl1123 := r.ReadArrayStart()
			if yyl1123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1124Slc
	var yyhl1124 bool = l >= 0
	for yyj1124 := 0; ; yyj1124++ {
		if yyhl1124 {
			if yyj1124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1124Slc = r.DecodeBytes(yys1124Slc, true, true)
		yys1124 := string(yys1124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1124 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = RunAsUserStrategy(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1126 := &x.Ranges
				yym1127 := z.DecBinary()
				_ = yym1127
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1126), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1124)
		} // end switch yys1124
	} // end for yyj1124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1128 int
	var yyb1128 bool
	var yyhl1128 bool = l >= 0
	yyj1128++
	if yyhl1128 {
		yyb1128 = yyj1128 > l
	} else {
		yyb1128 = r.CheckBreak()
	}
	if yyb1128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = RunAsUserStrategy(r.DecodeString())
	}
	yyj1128++
	if yyhl1128 {
		yyb1128 = yyj1128 > l
	} else {
		yyb1128 = r.CheckBreak()
	}
	if yyb1128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1130 := &x.Ranges
		yym1131 := z.DecBinary()
		_ = yym1131
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1130), d)
		}
	}
	for {
		yyj1128++
		if yyhl1128 {
			yyb1128 = yyj1128 > l
		} else {
			yyb1128 = r.CheckBreak()
		}
		if yyb1128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IDRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1132 := z.EncBinary()
		_ = yym1132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1133 := !z.EncBinary()
			yy2arr1133 := z.EncBasicHandle().StructToArray
			var yyq1133 [2]bool
			_, _, _ = yysep1133, yyq1133, yy2arr1133
			const yyr1133 bool = false
			var yynn1133 int
			if yyr1133 || yy2arr1133 {
				r.EncodeArrayStart(2)
			} else {
				yynn1133 = 2
				for _, b := range yyq1133 {
					if b {
						yynn1133++
					}
				}
				r.EncodeMapStart(yynn1133)
				yynn1133 = 0
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1135 := z.EncBinary()
				_ = yym1135
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1136 := z.EncBinary()
				_ = yym1136
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1138 := z.EncBinary()
				_ = yym1138
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1139 := z.EncBinary()
				_ = yym1139
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IDRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1140 := z.DecBinary()
	_ = yym1140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1141 := r.ContainerType()
		if yyct1141 == codecSelferValueTypeMap1234 {
			yyl1141 := r.ReadMapStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1141, d)
			}
		} else if yyct1141 == codecSelferValueTypeArray1234 {
			yyl1141 := r.ReadArrayStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IDRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1142Slc
	var yyhl1142 bool = l >= 0
	for yyj1142 := 0; ; yyj1142++ {
		if yyhl1142 {
			if yyj1142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1142Slc = r.DecodeBytes(yys1142Slc, true, true)
		yys1142 := string(yys1142Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1142 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int64(r.DecodeInt(64))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1142)
		} // end switch yys1142
	} // end for yyj1142
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IDRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1145 int
	var yyb1145 bool
	var yyhl1145 bool = l >= 0
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int64(r.DecodeInt(64))
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int64(r.DecodeInt(64))
	}
	for {
		yyj1145++
		if yyhl1145 {
			yyb1145 = yyj1145 > l
		} else {
			yyb1145 = r.CheckBreak()
		}
		if yyb1145 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1145-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RunAsUserStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1148 := z.EncBinary()
	_ = yym1148
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RunAsUserStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1149 := z.DecBinary()
	_ = yym1149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *FSGroupStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1150 := z.EncBinary()
		_ = yym1150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1151 := !z.EncBinary()
			yy2arr1151 := z.EncBasicHandle().StructToArray
			var yyq1151 [2]bool
			_, _, _ = yysep1151, yyq1151, yy2arr1151
			const yyr1151 bool = false
			yyq1151[0] = x.Rule != ""
			yyq1151[1] = len(x.Ranges) != 0
			var yynn1151 int
			if yyr1151 || yy2arr1151 {
				r.EncodeArrayStart(2)
			} else {
				yynn1151 = 0
				for _, b := range yyq1151 {
					if b {
						yynn1151++
					}
				}
				r.EncodeMapStart(yynn1151)
				yynn1151 = 0
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1151[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1151[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1151[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1154 := z.EncBinary()
						_ = yym1154
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1151[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1155 := z.EncBinary()
						_ = yym1155
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FSGroupStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1156 := z.DecBinary()
	_ = yym1156
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1157 := r.ContainerType()
		if yyct1157 == codecSelferValueTypeMap1234 {
			yyl1157 := r.ReadMapStart()
			if yyl1157 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1157, d)
			}
		} else if yyct1157 == codecSelferValueTypeArray1234 {
			yyl1157 := r.ReadArrayStart()
			if yyl1157 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1157, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1158Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1158Slc
	var yyhl1158 bool = l >= 0
	for yyj1158 := 0; ; yyj1158++ {
		if yyhl1158 {
			if yyj1158 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1158Slc = r.DecodeBytes(yys1158Slc, true, true)
		yys1158 := string(yys1158Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1158 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = FSGroupStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1160 := &x.Ranges
				yym1161 := z.DecBinary()
				_ = yym1161
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1160), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1158)
		} // end switch yys1158
	} // end for yyj1158
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1162 int
	var yyb1162 bool
	var yyhl1162 bool = l >= 0
	yyj1162++
	if yyhl1162 {
		yyb1162 = yyj1162 > l
	} else {
		yyb1162 = r.CheckBreak()
	}
	if yyb1162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = FSGroupStrategyType(r.DecodeString())
	}
	yyj1162++
	if yyhl1162 {
		yyb1162 = yyj1162 > l
	} else {
		yyb1162 = r.CheckBreak()
	}
	if yyb1162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1164 := &x.Ranges
		yym1165 := z.DecBinary()
		_ = yym1165
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1164), d)
		}
	}
	for {
		yyj1162++
		if yyhl1162 {
			yyb1162 = yyj1162 > l
		} else {
			yyb1162 = r.CheckBreak()
		}
		if yyb1162 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1162-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSGroupStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1166 := z.EncBinary()
	_ = yym1166
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSGroupStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1167 := z.DecBinary()
	_ = yym1167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1168 := z.EncBinary()
		_ = yym1168
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1169 := !z.EncBinary()
			yy2arr1169 := z.EncBasicHandle().StructToArray
			var yyq1169 [2]bool
			_, _, _ = yysep1169, yyq1169, yy2arr1169
			const yyr1169 bool = false
			yyq1169[0] = x.Rule != ""
			yyq1169[1] = len(x.Ranges) != 0
			var yynn1169 int
			if yyr1169 || yy2arr1169 {
				r.EncodeArrayStart(2)
			} else {
				yynn1169 = 0
				for _, b := range yyq1169 {
					if b {
						yynn1169++
					}
				}
				r.EncodeMapStart(yynn1169)
				yynn1169 = 0
			}
			if yyr1169 || yy2arr1169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1169[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1169[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1169 || yy2arr1169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1169[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1172 := z.EncBinary()
						_ = yym1172
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1169[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1173 := z.EncBinary()
						_ = yym1173
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1169 || yy2arr1169 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1174 := z.DecBinary()
	_ = yym1174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1175 := r.ContainerType()
		if yyct1175 == codecSelferValueTypeMap1234 {
			yyl1175 := r.ReadMapStart()
			if yyl1175 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1175, d)
			}
		} else if yyct1175 == codecSelferValueTypeArray1234 {
			yyl1175 := r.ReadArrayStart()
			if yyl1175 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1175, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1176Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1176Slc
	var yyhl1176 bool = l >= 0
	for yyj1176 := 0; ; yyj1176++ {
		if yyhl1176 {
			if yyj1176 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1176Slc = r.DecodeBytes(yys1176Slc, true, true)
		yys1176 := string(yys1176Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1176 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1178 := &x.Ranges
				yym1179 := z.DecBinary()
				_ = yym1179
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1178), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1176)
		} // end switch yys1176
	} // end for yyj1176
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1180 int
	var yyb1180 bool
	var yyhl1180 bool = l >= 0
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1182 := &x.Ranges
		yym1183 := z.DecBinary()
		_ = yym1183
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1182), d)
		}
	}
	for {
		yyj1180++
		if yyhl1180 {
			yyb1180 = yyj1180 > l
		} else {
			yyb1180 = r.CheckBreak()
		}
		if yyb1180 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1180-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SupplementalGroupsStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1184 := z.EncBinary()
	_ = yym1184
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SupplementalGroupsStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1185 := z.DecBinary()
	_ = yym1185
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSecurityPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1186 := z.EncBinary()
		_ = yym1186
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1187 := !z.EncBinary()
			yy2arr1187 := z.EncBasicHandle().StructToArray
			var yyq1187 [4]bool
			_, _, _ = yysep1187, yyq1187, yy2arr1187
			const yyr1187 bool = false
			yyq1187[0] = x.Kind != ""
			yyq1187[1] = x.APIVersion != ""
			yyq1187[2] = true
			var yynn1187 int
			if yyr1187 || yy2arr1187 {
				r.EncodeArrayStart(4)
			} else {
				yynn1187 = 1
				for _, b := range yyq1187 {
					if b {
						yynn1187++
					}
				}
				r.EncodeMapStart(yynn1187)
				yynn1187 = 0
			}
			if yyr1187 || yy2arr1187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1187[0] {
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1187[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1190 := z.EncBinary()
					_ = yym1190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1187 || yy2arr1187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1187[1] {
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1187[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1193 := z.EncBinary()
					_ = yym1193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1187 || yy2arr1187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1187[2] {
					yy1195 := &x.ListMeta
					yym1196 := z.EncBinary()
					_ = yym1196
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1195) {
					} else {
						z.EncFallback(yy1195)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1187[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1197 := &x.ListMeta
					yym1198 := z.EncBinary()
					_ = yym1198
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1197) {
					} else {
						z.EncFallback(yy1197)
					}
				}
			}
			if yyr1187 || yy2arr1187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1200 := z.EncBinary()
					_ = yym1200
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			}
			if yyr1187 || yy2arr1187 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1202 := z.DecBinary()
	_ = yym1202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1203 := r.ContainerType()
		if yyct1203 == codecSelferValueTypeMap1234 {
			yyl1203 := r.ReadMapStart()
			if yyl1203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1203, d)
			}
		} else if yyct1203 == codecSelferValueTypeArray1234 {
			yyl1203 := r.ReadArrayStart()
			if yyl1203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1204Slc
	var yyhl1204 bool = l >= 0
	for yyj1204 := 0; ; yyj1204++ {
		if yyhl1204 {
			if yyj1204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1204Slc = r.DecodeBytes(yys1204Slc, true, true)
		yys1204 := string(yys1204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1204 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1207 := &x.ListMeta
				yym1208 := z.DecBinary()
				_ = yym1208
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1207) {
				} else {
					z.DecFallback(yyv1207, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1209 := &x.Items
				yym1210 := z.DecBinary()
				_ = yym1210
				if false {
				} else {
					h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1209), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1204)
		} // end switch yys1204
	} // end for yyj1204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1211 int
	var yyb1211 bool
	var yyhl1211 bool = l >= 0
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1214 := &x.ListMeta
		yym1215 := z.DecBinary()
		_ = yym1215
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1214) {
		} else {
			z.DecFallback(yyv1214, false)
		}
	}
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1216 := &x.Items
		yym1217 := z.DecBinary()
		_ = yym1217
		if false {
		} else {
			h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1216), d)
		}
	}
	for {
		yyj1211++
		if yyhl1211 {
			yyb1211 = yyj1211 > l
		} else {
			yyb1211 = r.CheckBreak()
		}
		if yyb1211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1218 := z.EncBinary()
		_ = yym1218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1219 := !z.EncBinary()
			yy2arr1219 := z.EncBasicHandle().StructToArray
			var yyq1219 [4]bool
			_, _, _ = yysep1219, yyq1219, yy2arr1219
			const yyr1219 bool = false
			yyq1219[0] = x.Kind != ""
			yyq1219[1] = x.APIVersion != ""
			yyq1219[2] = true
			yyq1219[3] = true
			var yynn1219 int
			if yyr1219 || yy2arr1219 {
				r.EncodeArrayStart(4)
			} else {
				yynn1219 = 0
				for _, b := range yyq1219 {
					if b {
						yynn1219++
					}
				}
				r.EncodeMapStart(yynn1219)
				yynn1219 = 0
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1219[0] {
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1219[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1222 := z.EncBinary()
					_ = yym1222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1219[1] {
					yym1224 := z.EncBinary()
					_ = yym1224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1219[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1225 := z.EncBinary()
					_ = yym1225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1219[2] {
					yy1227 := &x.ObjectMeta
					yy1227.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1219[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1228 := &x.ObjectMeta
					yy1228.CodecEncodeSelf(e)
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1219[3] {
					yy1230 := &x.Spec
					yy1230.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1219[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1231 := &x.Spec
					yy1231.CodecEncodeSelf(e)
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1232 := z.DecBinary()
	_ = yym1232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1233 := r.ContainerType()
		if yyct1233 == codecSelferValueTypeMap1234 {
			yyl1233 := r.ReadMapStart()
			if yyl1233 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1233, d)
			}
		} else if yyct1233 == codecSelferValueTypeArray1234 {
			yyl1233 := r.ReadArrayStart()
			if yyl1233 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1233, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1234Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1234Slc
	var yyhl1234 bool = l >= 0
	for yyj1234 := 0; ; yyj1234++ {
		if yyhl1234 {
			if yyj1234 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1234Slc = r.DecodeBytes(yys1234Slc, true, true)
		yys1234 := string(yys1234Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1234 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1237 := &x.ObjectMeta
				yyv1237.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkPolicySpec{}
			} else {
				yyv1238 := &x.Spec
				yyv1238.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1234)
		} // end switch yys1234
	} // end for yyj1234
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1239 int
	var yyb1239 bool
	var yyhl1239 bool = l >= 0
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1242 := &x.ObjectMeta
		yyv1242.CodecDecodeSelf(d)
	}
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NetworkPolicySpec{}
	} else {
		yyv1243 := &x.Spec
		yyv1243.CodecDecodeSelf(d)
	}
	for {
		yyj1239++
		if yyhl1239 {
			yyb1239 = yyj1239 > l
		} else {
			yyb1239 = r.CheckBreak()
		}
		if yyb1239 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1239-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1244 := z.EncBinary()
		_ = yym1244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1245 := !z.EncBinary()
			yy2arr1245 := z.EncBasicHandle().StructToArray
			var yyq1245 [2]bool
			_, _, _ = yysep1245, yyq1245, yy2arr1245
			const yyr1245 bool = false
			yyq1245[1] = len(x.Ingress) != 0
			var yynn1245 int
			if yyr1245 || yy2arr1245 {
				r.EncodeArrayStart(2)
			} else {
				yynn1245 = 1
				for _, b := range yyq1245 {
					if b {
						yynn1245++
					}
				}
				r.EncodeMapStart(yynn1245)
				yynn1245 = 0
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1247 := &x.PodSelector
				yym1248 := z.EncBinary()
				_ = yym1248
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1247) {
				} else {
					z.EncFallback(yy1247)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1249 := &x.PodSelector
				yym1250 := z.EncBinary()
				_ = yym1250
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1249) {
				} else {
					z.EncFallback(yy1249)
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1245[1] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1252 := z.EncBinary()
						_ = yym1252
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1245[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1253 := z.EncBinary()
						_ = yym1253
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1254 := z.DecBinary()
	_ = yym1254
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1255 := r.ContainerType()
		if yyct1255 == codecSelferValueTypeMap1234 {
			yyl1255 := r.ReadMapStart()
			if yyl1255 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1255, d)
			}
		} else if yyct1255 == codecSelferValueTypeArray1234 {
			yyl1255 := r.ReadArrayStart()
			if yyl1255 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1255, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1256Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1256Slc
	var yyhl1256 bool = l >= 0
	for yyj1256 := 0; ; yyj1256++ {
		if yyhl1256 {
			if yyj1256 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1256Slc = r.DecodeBytes(yys1256Slc, true, true)
		yys1256 := string(yys1256Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1256 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				x.PodSelector = pkg1_unversioned.LabelSelector{}
			} else {
				yyv1257 := &x.PodSelector
				yym1258 := z.DecBinary()
				_ = yym1258
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1257) {
				} else {
					z.DecFallback(yyv1257, false)
				}
			}
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1259 := &x.Ingress
				yym1260 := z.DecBinary()
				_ = yym1260
				if false {
				} else {
					h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1259), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1256)
		} // end switch yys1256
	} // end for yyj1256
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1261 int
	var yyb1261 bool
	var yyhl1261 bool = l >= 0
	yyj1261++
	if yyhl1261 {
		yyb1261 = yyj1261 > l
	} else {
		yyb1261 = r.CheckBreak()
	}
	if yyb1261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSelector = pkg1_unversioned.LabelSelector{}
	} else {
		yyv1262 := &x.PodSelector
		yym1263 := z.DecBinary()
		_ = yym1263
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1262) {
		} else {
			z.DecFallback(yyv1262, false)
		}
	}
	yyj1261++
	if yyhl1261 {
		yyb1261 = yyj1261 > l
	} else {
		yyb1261 = r.CheckBreak()
	}
	if yyb1261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1264 := &x.Ingress
		yym1265 := z.DecBinary()
		_ = yym1265
		if false {
		} else {
			h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1264), d)
		}
	}
	for {
		yyj1261++
		if yyhl1261 {
			yyb1261 = yyj1261 > l
		} else {
			yyb1261 = r.CheckBreak()
		}
		if yyb1261 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1261-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyIngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1266 := z.EncBinary()
		_ = yym1266
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1267 := !z.EncBinary()
			yy2arr1267 := z.EncBasicHandle().StructToArray
			var yyq1267 [2]bool
			_, _, _ = yysep1267, yyq1267, yy2arr1267
			const yyr1267 bool = false
			yyq1267[0] = len(x.Ports) != 0
			yyq1267[1] = len(x.From) != 0
			var yynn1267 int
			if yyr1267 || yy2arr1267 {
				r.EncodeArrayStart(2)
			} else {
				yynn1267 = 0
				for _, b := range yyq1267 {
					if b {
						yynn1267++
					}
				}
				r.EncodeMapStart(yynn1267)
				yynn1267 = 0
			}
			if yyr1267 || yy2arr1267 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1267[0] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1269 := z.EncBinary()
						_ = yym1269
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1267[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1270 := z.EncBinary()
						_ = yym1270
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1267 || yy2arr1267 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1267[1] {
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1272 := z.EncBinary()
						_ = yym1272
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1267[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("from"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1273 := z.EncBinary()
						_ = yym1273
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				}
			}
			if yyr1267 || yy2arr1267 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyIngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1274 := z.DecBinary()
	_ = yym1274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1275 := r.ContainerType()
		if yyct1275 == codecSelferValueTypeMap1234 {
			yyl1275 := r.ReadMapStart()
			if yyl1275 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1275, d)
			}
		} else if yyct1275 == codecSelferValueTypeArray1234 {
			yyl1275 := r.ReadArrayStart()
			if yyl1275 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1275, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1276Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1276Slc
	var yyhl1276 bool = l >= 0
	for yyj1276 := 0; ; yyj1276++ {
		if yyhl1276 {
			if yyj1276 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1276Slc = r.DecodeBytes(yys1276Slc, true, true)
		yys1276 := string(yys1276Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1276 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1277 := &x.Ports
				yym1278 := z.DecBinary()
				_ = yym1278
				if false {
				} else {
					h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1277), d)
				}
			}
		case "from":
			if r.TryDecodeAsNil() {
				x.From = nil
			} else {
				yyv1279 := &x.From
				yym1280 := z.DecBinary()
				_ = yym1280
				if false {
				} else {
					h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1279), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1276)
		} // end switch yys1276
	} // end for yyj1276
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1281 int
	var yyb1281 bool
	var yyhl1281 bool = l >= 0
	yyj1281++
	if yyhl1281 {
		yyb1281 = yyj1281 > l
	} else {
		yyb1281 = r.CheckBreak()
	}
	if yyb1281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1282 := &x.Ports
		yym1283 := z.DecBinary()
		_ = yym1283
		if false {
		} else {
			h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1282), d)
		}
	}
	yyj1281++
	if yyhl1281 {
		yyb1281 = yyj1281 > l
	} else {
		yyb1281 = r.CheckBreak()
	}
	if yyb1281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.From = nil
	} else {
		yyv1284 := &x.From
		yym1285 := z.DecBinary()
		_ = yym1285
		if false {
		} else {
			h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1284), d)
		}
	}
	for {
		yyj1281++
		if yyhl1281 {
			yyb1281 = yyj1281 > l
		} else {
			yyb1281 = r.CheckBreak()
		}
		if yyb1281 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1281-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1286 := z.EncBinary()
		_ = yym1286
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1287 := !z.EncBinary()
			yy2arr1287 := z.EncBasicHandle().StructToArray
			var yyq1287 [2]bool
			_, _, _ = yysep1287, yyq1287, yy2arr1287
			const yyr1287 bool = false
			yyq1287[0] = x.Protocol != nil
			yyq1287[1] = x.Port != nil
			var yynn1287 int
			if yyr1287 || yy2arr1287 {
				r.EncodeArrayStart(2)
			} else {
				yynn1287 = 0
				for _, b := range yyq1287 {
					if b {
						yynn1287++
					}
				}
				r.EncodeMapStart(yynn1287)
				yynn1287 = 0
			}
			if yyr1287 || yy2arr1287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1287[0] {
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1289 := *x.Protocol
						yym1290 := z.EncBinary()
						_ = yym1290
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1289) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1289))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1287[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1291 := *x.Protocol
						yym1292 := z.EncBinary()
						_ = yym1292
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1291) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1291))
						}
					}
				}
			}
			if yyr1287 || yy2arr1287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1287[1] {
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1294 := z.EncBinary()
						_ = yym1294
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1294 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1287[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1295 := z.EncBinary()
						_ = yym1295
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1295 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				}
			}
			if yyr1287 || yy2arr1287 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1296 := z.DecBinary()
	_ = yym1296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1297 := r.ContainerType()
		if yyct1297 == codecSelferValueTypeMap1234 {
			yyl1297 := r.ReadMapStart()
			if yyl1297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1297, d)
			}
		} else if yyct1297 == codecSelferValueTypeArray1234 {
			yyl1297 := r.ReadArrayStart()
			if yyl1297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1298Slc
	var yyhl1298 bool = l >= 0
	for yyj1298 := 0; ; yyj1298++ {
		if yyhl1298 {
			if yyj1298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1298Slc = r.DecodeBytes(yys1298Slc, true, true)
		yys1298 := string(yys1298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1298 {
		case "protocol":
			if r.TryDecodeAsNil() {
				if x.Protocol != nil {
					x.Protocol = nil
				}
			} else {
				if x.Protocol == nil {
					x.Protocol = new(pkg2_api.Protocol)
				}
				x.Protocol.CodecDecodeSelf(d)
			}
		case "port":
			if r.TryDecodeAsNil() {
				if x.Port != nil {
					x.Port = nil
				}
			} else {
				if x.Port == nil {
					x.Port = new(pkg5_intstr.IntOrString)
				}
				yym1301 := z.DecBinary()
				_ = yym1301
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Port) {
				} else if !yym1301 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Port)
				} else {
					z.DecFallback(x.Port, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1298)
		} // end switch yys1298
	} // end for yyj1298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1302 int
	var yyb1302 bool
	var yyhl1302 bool = l >= 0
	yyj1302++
	if yyhl1302 {
		yyb1302 = yyj1302 > l
	} else {
		yyb1302 = r.CheckBreak()
	}
	if yyb1302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Protocol != nil {
			x.Protocol = nil
		}
	} else {
		if x.Protocol == nil {
			x.Protocol = new(pkg2_api.Protocol)
		}
		x.Protocol.CodecDecodeSelf(d)
	}
	yyj1302++
	if yyhl1302 {
		yyb1302 = yyj1302 > l
	} else {
		yyb1302 = r.CheckBreak()
	}
	if yyb1302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Port != nil {
			x.Port = nil
		}
	} else {
		if x.Port == nil {
			x.Port = new(pkg5_intstr.IntOrString)
		}
		yym1305 := z.DecBinary()
		_ = yym1305
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Port) {
		} else if !yym1305 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Port)
		} else {
			z.DecFallback(x.Port, false)
		}
	}
	for {
		yyj1302++
		if yyhl1302 {
			yyb1302 = yyj1302 > l
		} else {
			yyb1302 = r.CheckBreak()
		}
		if yyb1302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPeer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1306 := z.EncBinary()
		_ = yym1306
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1307 := !z.EncBinary()
			yy2arr1307 := z.EncBasicHandle().StructToArray
			var yyq1307 [2]bool
			_, _, _ = yysep1307, yyq1307, yy2arr1307
			const yyr1307 bool = false
			yyq1307[0] = x.PodSelector != nil
			yyq1307[1] = x.NamespaceSelector != nil
			var yynn1307 int
			if yyr1307 || yy2arr1307 {
				r.EncodeArrayStart(2)
			} else {
				yynn1307 = 0
				for _, b := range yyq1307 {
					if b {
						yynn1307++
					}
				}
				r.EncodeMapStart(yynn1307)
				yynn1307 = 0
			}
			if yyr1307 || yy2arr1307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1307[0] {
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1309 := z.EncBinary()
						_ = yym1309
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1307[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1310 := z.EncBinary()
						_ = yym1310
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				}
			}
			if yyr1307 || yy2arr1307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1307[1] {
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1312 := z.EncBinary()
						_ = yym1312
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1307[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespaceSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1313 := z.EncBinary()
						_ = yym1313
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				}
			}
			if yyr1307 || yy2arr1307 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPeer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1314 := z.DecBinary()
	_ = yym1314
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1315 := r.ContainerType()
		if yyct1315 == codecSelferValueTypeMap1234 {
			yyl1315 := r.ReadMapStart()
			if yyl1315 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1315, d)
			}
		} else if yyct1315 == codecSelferValueTypeArray1234 {
			yyl1315 := r.ReadArrayStart()
			if yyl1315 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1315, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1316Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1316Slc
	var yyhl1316 bool = l >= 0
	for yyj1316 := 0; ; yyj1316++ {
		if yyhl1316 {
			if yyj1316 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1316Slc = r.DecodeBytes(yys1316Slc, true, true)
		yys1316 := string(yys1316Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1316 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				if x.PodSelector != nil {
					x.PodSelector = nil
				}
			} else {
				if x.PodSelector == nil {
					x.PodSelector = new(pkg1_unversioned.LabelSelector)
				}
				yym1318 := z.DecBinary()
				_ = yym1318
				if false {
				} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
				} else {
					z.DecFallback(x.PodSelector, false)
				}
			}
		case "namespaceSelector":
			if r.TryDecodeAsNil() {
				if x.NamespaceSelector != nil {
					x.NamespaceSelector = nil
				}
			} else {
				if x.NamespaceSelector == nil {
					x.NamespaceSelector = new(pkg1_unversioned.LabelSelector)
				}
				yym1320 := z.DecBinary()
				_ = yym1320
				if false {
				} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
				} else {
					z.DecFallback(x.NamespaceSelector, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1316)
		} // end switch yys1316
	} // end for yyj1316
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1321 int
	var yyb1321 bool
	var yyhl1321 bool = l >= 0
	yyj1321++
	if yyhl1321 {
		yyb1321 = yyj1321 > l
	} else {
		yyb1321 = r.CheckBreak()
	}
	if yyb1321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodSelector != nil {
			x.PodSelector = nil
		}
	} else {
		if x.PodSelector == nil {
			x.PodSelector = new(pkg1_unversioned.LabelSelector)
		}
		yym1323 := z.DecBinary()
		_ = yym1323
		if false {
		} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
		} else {
			z.DecFallback(x.PodSelector, false)
		}
	}
	yyj1321++
	if yyhl1321 {
		yyb1321 = yyj1321 > l
	} else {
		yyb1321 = r.CheckBreak()
	}
	if yyb1321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NamespaceSelector != nil {
			x.NamespaceSelector = nil
		}
	} else {
		if x.NamespaceSelector == nil {
			x.NamespaceSelector = new(pkg1_unversioned.LabelSelector)
		}
		yym1325 := z.DecBinary()
		_ = yym1325
		if false {
		} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
		} else {
			z.DecFallback(x.NamespaceSelector, false)
		}
	}
	for {
		yyj1321++
		if yyhl1321 {
			yyb1321 = yyj1321 > l
		} else {
			yyb1321 = r.CheckBreak()
		}
		if yyb1321 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1321-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1326 := z.EncBinary()
		_ = yym1326
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1327 := !z.EncBinary()
			yy2arr1327 := z.EncBasicHandle().StructToArray
			var yyq1327 [4]bool
			_, _, _ = yysep1327, yyq1327, yy2arr1327
			const yyr1327 bool = false
			yyq1327[0] = x.Kind != ""
			yyq1327[1] = x.APIVersion != ""
			yyq1327[2] = true
			var yynn1327 int
			if yyr1327 || yy2arr1327 {
				r.EncodeArrayStart(4)
			} else {
				yynn1327 = 1
				for _, b := range yyq1327 {
					if b {
						yynn1327++
					}
				}
				r.EncodeMapStart(yynn1327)
				yynn1327 = 0
			}
			if yyr1327 || yy2arr1327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1327[0] {
					yym1329 := z.EncBinary()
					_ = yym1329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1327[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1330 := z.EncBinary()
					_ = yym1330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1327 || yy2arr1327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1327[1] {
					yym1332 := z.EncBinary()
					_ = yym1332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1327[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1333 := z.EncBinary()
					_ = yym1333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1327 || yy2arr1327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1327[2] {
					yy1335 := &x.ListMeta
					yym1336 := z.EncBinary()
					_ = yym1336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1335) {
					} else {
						z.EncFallback(yy1335)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1327[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1337 := &x.ListMeta
					yym1338 := z.EncBinary()
					_ = yym1338
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1337) {
					} else {
						z.EncFallback(yy1337)
					}
				}
			}
			if yyr1327 || yy2arr1327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1340 := z.EncBinary()
					_ = yym1340
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1341 := z.EncBinary()
					_ = yym1341
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			}
			if yyr1327 || yy2arr1327 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1342 := z.DecBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1343 := r.ContainerType()
		if yyct1343 == codecSelferValueTypeMap1234 {
			yyl1343 := r.ReadMapStart()
			if yyl1343 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1343, d)
			}
		} else if yyct1343 == codecSelferValueTypeArray1234 {
			yyl1343 := r.ReadArrayStart()
			if yyl1343 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1343, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1344Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1344Slc
	var yyhl1344 bool = l >= 0
	for yyj1344 := 0; ; yyj1344++ {
		if yyhl1344 {
			if yyj1344 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1344Slc = r.DecodeBytes(yys1344Slc, true, true)
		yys1344 := string(yys1344Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1344 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1347 := &x.ListMeta
				yym1348 := z.DecBinary()
				_ = yym1348
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1347) {
				} else {
					z.DecFallback(yyv1347, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1349 := &x.Items
				yym1350 := z.DecBinary()
				_ = yym1350
				if false {
				} else {
					h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1349), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1344)
		} // end switch yys1344
	} // end for yyj1344
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1351 int
	var yyb1351 bool
	var yyhl1351 bool = l >= 0
	yyj1351++
	if yyhl1351 {
		yyb1351 = yyj1351 > l
	} else {
		yyb1351 = r.CheckBreak()
	}
	if yyb1351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1351++
	if yyhl1351 {
		yyb1351 = yyj1351 > l
	} else {
		yyb1351 = r.CheckBreak()
	}
	if yyb1351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1351++
	if yyhl1351 {
		yyb1351 = yyj1351 > l
	} else {
		yyb1351 = r.CheckBreak()
	}
	if yyb1351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1354 := &x.ListMeta
		yym1355 := z.DecBinary()
		_ = yym1355
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1354) {
		} else {
			z.DecFallback(yyv1354, false)
		}
	}
	yyj1351++
	if yyhl1351 {
		yyb1351 = yyj1351 > l
	} else {
		yyb1351 = r.CheckBreak()
	}
	if yyb1351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1356 := &x.Items
		yym1357 := z.DecBinary()
		_ = yym1357
		if false {
		} else {
			h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1356), d)
		}
	}
	for {
		yyj1351++
		if yyhl1351 {
			yyb1351 = yyj1351 > l
		} else {
			yyb1351 = r.CheckBreak()
		}
		if yyb1351 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1351-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1358 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1359 := &yyv1358
		yy1359.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1360 := *v
	yyh1360, yyl1360 := z.DecSliceHelperStart()
	var yyc1360 bool
	if yyl1360 == 0 {
		if yyv1360 == nil {
			yyv1360 = []CustomMetricTarget{}
			yyc1360 = true
		} else if len(yyv1360) != 0 {
			yyv1360 = yyv1360[:0]
			yyc1360 = true
		}
	} else if yyl1360 > 0 {
		var yyrr1360, yyrl1360 int
		var yyrt1360 bool
		if yyl1360 > cap(yyv1360) {

			yyrg1360 := len(yyv1360) > 0
			yyv21360 := yyv1360
			yyrl1360, yyrt1360 = z.DecInferLen(yyl1360, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1360 {
				if yyrl1360 <= cap(yyv1360) {
					yyv1360 = yyv1360[:yyrl1360]
				} else {
					yyv1360 = make([]CustomMetricTarget, yyrl1360)
				}
			} else {
				yyv1360 = make([]CustomMetricTarget, yyrl1360)
			}
			yyc1360 = true
			yyrr1360 = len(yyv1360)
			if yyrg1360 {
				copy(yyv1360, yyv21360)
			}
		} else if yyl1360 != len(yyv1360) {
			yyv1360 = yyv1360[:yyl1360]
			yyc1360 = true
		}
		yyj1360 := 0
		for ; yyj1360 < yyrr1360; yyj1360++ {
			yyh1360.ElemContainerState(yyj1360)
			if r.TryDecodeAsNil() {
				yyv1360[yyj1360] = CustomMetricTarget{}
			} else {
				yyv1361 := &yyv1360[yyj1360]
				yyv1361.CodecDecodeSelf(d)
			}

		}
		if yyrt1360 {
			for ; yyj1360 < yyl1360; yyj1360++ {
				yyv1360 = append(yyv1360, CustomMetricTarget{})
				yyh1360.ElemContainerState(yyj1360)
				if r.TryDecodeAsNil() {
					yyv1360[yyj1360] = CustomMetricTarget{}
				} else {
					yyv1362 := &yyv1360[yyj1360]
					yyv1362.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1360 := 0
		for ; !r.CheckBreak(); yyj1360++ {

			if yyj1360 >= len(yyv1360) {
				yyv1360 = append(yyv1360, CustomMetricTarget{}) // var yyz1360 CustomMetricTarget
				yyc1360 = true
			}
			yyh1360.ElemContainerState(yyj1360)
			if yyj1360 < len(yyv1360) {
				if r.TryDecodeAsNil() {
					yyv1360[yyj1360] = CustomMetricTarget{}
				} else {
					yyv1363 := &yyv1360[yyj1360]
					yyv1363.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1360 < len(yyv1360) {
			yyv1360 = yyv1360[:yyj1360]
			yyc1360 = true
		} else if yyj1360 == 0 && yyv1360 == nil {
			yyv1360 = []CustomMetricTarget{}
			yyc1360 = true
		}
	}
	yyh1360.End()
	if yyc1360 {
		*v = yyv1360
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1364 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1365 := &yyv1364
		yy1365.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1366 := *v
	yyh1366, yyl1366 := z.DecSliceHelperStart()
	var yyc1366 bool
	if yyl1366 == 0 {
		if yyv1366 == nil {
			yyv1366 = []CustomMetricCurrentStatus{}
			yyc1366 = true
		} else if len(yyv1366) != 0 {
			yyv1366 = yyv1366[:0]
			yyc1366 = true
		}
	} else if yyl1366 > 0 {
		var yyrr1366, yyrl1366 int
		var yyrt1366 bool
		if yyl1366 > cap(yyv1366) {

			yyrg1366 := len(yyv1366) > 0
			yyv21366 := yyv1366
			yyrl1366, yyrt1366 = z.DecInferLen(yyl1366, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1366 {
				if yyrl1366 <= cap(yyv1366) {
					yyv1366 = yyv1366[:yyrl1366]
				} else {
					yyv1366 = make([]CustomMetricCurrentStatus, yyrl1366)
				}
			} else {
				yyv1366 = make([]CustomMetricCurrentStatus, yyrl1366)
			}
			yyc1366 = true
			yyrr1366 = len(yyv1366)
			if yyrg1366 {
				copy(yyv1366, yyv21366)
			}
		} else if yyl1366 != len(yyv1366) {
			yyv1366 = yyv1366[:yyl1366]
			yyc1366 = true
		}
		yyj1366 := 0
		for ; yyj1366 < yyrr1366; yyj1366++ {
			yyh1366.ElemContainerState(yyj1366)
			if r.TryDecodeAsNil() {
				yyv1366[yyj1366] = CustomMetricCurrentStatus{}
			} else {
				yyv1367 := &yyv1366[yyj1366]
				yyv1367.CodecDecodeSelf(d)
			}

		}
		if yyrt1366 {
			for ; yyj1366 < yyl1366; yyj1366++ {
				yyv1366 = append(yyv1366, CustomMetricCurrentStatus{})
				yyh1366.ElemContainerState(yyj1366)
				if r.TryDecodeAsNil() {
					yyv1366[yyj1366] = CustomMetricCurrentStatus{}
				} else {
					yyv1368 := &yyv1366[yyj1366]
					yyv1368.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1366 := 0
		for ; !r.CheckBreak(); yyj1366++ {

			if yyj1366 >= len(yyv1366) {
				yyv1366 = append(yyv1366, CustomMetricCurrentStatus{}) // var yyz1366 CustomMetricCurrentStatus
				yyc1366 = true
			}
			yyh1366.ElemContainerState(yyj1366)
			if yyj1366 < len(yyv1366) {
				if r.TryDecodeAsNil() {
					yyv1366[yyj1366] = CustomMetricCurrentStatus{}
				} else {
					yyv1369 := &yyv1366[yyj1366]
					yyv1369.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1366 < len(yyv1366) {
			yyv1366 = yyv1366[:yyj1366]
			yyc1366 = true
		} else if yyj1366 == 0 && yyv1366 == nil {
			yyv1366 = []CustomMetricCurrentStatus{}
			yyc1366 = true
		}
	}
	yyh1366.End()
	if yyc1366 {
		*v = yyv1366
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1370 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1371 := &yyv1370
		yy1371.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1372 := *v
	yyh1372, yyl1372 := z.DecSliceHelperStart()
	var yyc1372 bool
	if yyl1372 == 0 {
		if yyv1372 == nil {
			yyv1372 = []APIVersion{}
			yyc1372 = true
		} else if len(yyv1372) != 0 {
			yyv1372 = yyv1372[:0]
			yyc1372 = true
		}
	} else if yyl1372 > 0 {
		var yyrr1372, yyrl1372 int
		var yyrt1372 bool
		if yyl1372 > cap(yyv1372) {

			yyrg1372 := len(yyv1372) > 0
			yyv21372 := yyv1372
			yyrl1372, yyrt1372 = z.DecInferLen(yyl1372, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1372 {
				if yyrl1372 <= cap(yyv1372) {
					yyv1372 = yyv1372[:yyrl1372]
				} else {
					yyv1372 = make([]APIVersion, yyrl1372)
				}
			} else {
				yyv1372 = make([]APIVersion, yyrl1372)
			}
			yyc1372 = true
			yyrr1372 = len(yyv1372)
			if yyrg1372 {
				copy(yyv1372, yyv21372)
			}
		} else if yyl1372 != len(yyv1372) {
			yyv1372 = yyv1372[:yyl1372]
			yyc1372 = true
		}
		yyj1372 := 0
		for ; yyj1372 < yyrr1372; yyj1372++ {
			yyh1372.ElemContainerState(yyj1372)
			if r.TryDecodeAsNil() {
				yyv1372[yyj1372] = APIVersion{}
			} else {
				yyv1373 := &yyv1372[yyj1372]
				yyv1373.CodecDecodeSelf(d)
			}

		}
		if yyrt1372 {
			for ; yyj1372 < yyl1372; yyj1372++ {
				yyv1372 = append(yyv1372, APIVersion{})
				yyh1372.ElemContainerState(yyj1372)
				if r.TryDecodeAsNil() {
					yyv1372[yyj1372] = APIVersion{}
				} else {
					yyv1374 := &yyv1372[yyj1372]
					yyv1374.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1372 := 0
		for ; !r.CheckBreak(); yyj1372++ {

			if yyj1372 >= len(yyv1372) {
				yyv1372 = append(yyv1372, APIVersion{}) // var yyz1372 APIVersion
				yyc1372 = true
			}
			yyh1372.ElemContainerState(yyj1372)
			if yyj1372 < len(yyv1372) {
				if r.TryDecodeAsNil() {
					yyv1372[yyj1372] = APIVersion{}
				} else {
					yyv1375 := &yyv1372[yyj1372]
					yyv1375.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1372 < len(yyv1372) {
			yyv1372 = yyv1372[:yyj1372]
			yyc1372 = true
		} else if yyj1372 == 0 && yyv1372 == nil {
			yyv1372 = []APIVersion{}
			yyc1372 = true
		}
	}
	yyh1372.End()
	if yyc1372 {
		*v = yyv1372
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1376 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1377 := &yyv1376
		yy1377.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1378 := *v
	yyh1378, yyl1378 := z.DecSliceHelperStart()
	var yyc1378 bool
	if yyl1378 == 0 {
		if yyv1378 == nil {
			yyv1378 = []ThirdPartyResource{}
			yyc1378 = true
		} else if len(yyv1378) != 0 {
			yyv1378 = yyv1378[:0]
			yyc1378 = true
		}
	} else if yyl1378 > 0 {
		var yyrr1378, yyrl1378 int
		var yyrt1378 bool
		if yyl1378 > cap(yyv1378) {

			yyrg1378 := len(yyv1378) > 0
			yyv21378 := yyv1378
			yyrl1378, yyrt1378 = z.DecInferLen(yyl1378, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt1378 {
				if yyrl1378 <= cap(yyv1378) {
					yyv1378 = yyv1378[:yyrl1378]
				} else {
					yyv1378 = make([]ThirdPartyResource, yyrl1378)
				}
			} else {
				yyv1378 = make([]ThirdPartyResource, yyrl1378)
			}
			yyc1378 = true
			yyrr1378 = len(yyv1378)
			if yyrg1378 {
				copy(yyv1378, yyv21378)
			}
		} else if yyl1378 != len(yyv1378) {
			yyv1378 = yyv1378[:yyl1378]
			yyc1378 = true
		}
		yyj1378 := 0
		for ; yyj1378 < yyrr1378; yyj1378++ {
			yyh1378.ElemContainerState(yyj1378)
			if r.TryDecodeAsNil() {
				yyv1378[yyj1378] = ThirdPartyResource{}
			} else {
				yyv1379 := &yyv1378[yyj1378]
				yyv1379.CodecDecodeSelf(d)
			}

		}
		if yyrt1378 {
			for ; yyj1378 < yyl1378; yyj1378++ {
				yyv1378 = append(yyv1378, ThirdPartyResource{})
				yyh1378.ElemContainerState(yyj1378)
				if r.TryDecodeAsNil() {
					yyv1378[yyj1378] = ThirdPartyResource{}
				} else {
					yyv1380 := &yyv1378[yyj1378]
					yyv1380.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1378 := 0
		for ; !r.CheckBreak(); yyj1378++ {

			if yyj1378 >= len(yyv1378) {
				yyv1378 = append(yyv1378, ThirdPartyResource{}) // var yyz1378 ThirdPartyResource
				yyc1378 = true
			}
			yyh1378.ElemContainerState(yyj1378)
			if yyj1378 < len(yyv1378) {
				if r.TryDecodeAsNil() {
					yyv1378[yyj1378] = ThirdPartyResource{}
				} else {
					yyv1381 := &yyv1378[yyj1378]
					yyv1381.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1378 < len(yyv1378) {
			yyv1378 = yyv1378[:yyj1378]
			yyc1378 = true
		} else if yyj1378 == 0 && yyv1378 == nil {
			yyv1378 = []ThirdPartyResource{}
			yyc1378 = true
		}
	}
	yyh1378.End()
	if yyc1378 {
		*v = yyv1378
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1382 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1383 := &yyv1382
		yy1383.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1384 := *v
	yyh1384, yyl1384 := z.DecSliceHelperStart()
	var yyc1384 bool
	if yyl1384 == 0 {
		if yyv1384 == nil {
			yyv1384 = []Deployment{}
			yyc1384 = true
		} else if len(yyv1384) != 0 {
			yyv1384 = yyv1384[:0]
			yyc1384 = true
		}
	} else if yyl1384 > 0 {
		var yyrr1384, yyrl1384 int
		var yyrt1384 bool
		if yyl1384 > cap(yyv1384) {

			yyrg1384 := len(yyv1384) > 0
			yyv21384 := yyv1384
			yyrl1384, yyrt1384 = z.DecInferLen(yyl1384, z.DecBasicHandle().MaxInitLen, 800)
			if yyrt1384 {
				if yyrl1384 <= cap(yyv1384) {
					yyv1384 = yyv1384[:yyrl1384]
				} else {
					yyv1384 = make([]Deployment, yyrl1384)
				}
			} else {
				yyv1384 = make([]Deployment, yyrl1384)
			}
			yyc1384 = true
			yyrr1384 = len(yyv1384)
			if yyrg1384 {
				copy(yyv1384, yyv21384)
			}
		} else if yyl1384 != len(yyv1384) {
			yyv1384 = yyv1384[:yyl1384]
			yyc1384 = true
		}
		yyj1384 := 0
		for ; yyj1384 < yyrr1384; yyj1384++ {
			yyh1384.ElemContainerState(yyj1384)
			if r.TryDecodeAsNil() {
				yyv1384[yyj1384] = Deployment{}
			} else {
				yyv1385 := &yyv1384[yyj1384]
				yyv1385.CodecDecodeSelf(d)
			}

		}
		if yyrt1384 {
			for ; yyj1384 < yyl1384; yyj1384++ {
				yyv1384 = append(yyv1384, Deployment{})
				yyh1384.ElemContainerState(yyj1384)
				if r.TryDecodeAsNil() {
					yyv1384[yyj1384] = Deployment{}
				} else {
					yyv1386 := &yyv1384[yyj1384]
					yyv1386.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1384 := 0
		for ; !r.CheckBreak(); yyj1384++ {

			if yyj1384 >= len(yyv1384) {
				yyv1384 = append(yyv1384, Deployment{}) // var yyz1384 Deployment
				yyc1384 = true
			}
			yyh1384.ElemContainerState(yyj1384)
			if yyj1384 < len(yyv1384) {
				if r.TryDecodeAsNil() {
					yyv1384[yyj1384] = Deployment{}
				} else {
					yyv1387 := &yyv1384[yyj1384]
					yyv1387.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1384 < len(yyv1384) {
			yyv1384 = yyv1384[:yyj1384]
			yyc1384 = true
		} else if yyj1384 == 0 && yyv1384 == nil {
			yyv1384 = []Deployment{}
			yyc1384 = true
		}
	}
	yyh1384.End()
	if yyc1384 {
		*v = yyv1384
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1388 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1389 := &yyv1388
		yy1389.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1390 := *v
	yyh1390, yyl1390 := z.DecSliceHelperStart()
	var yyc1390 bool
	if yyl1390 == 0 {
		if yyv1390 == nil {
			yyv1390 = []DaemonSet{}
			yyc1390 = true
		} else if len(yyv1390) != 0 {
			yyv1390 = yyv1390[:0]
			yyc1390 = true
		}
	} else if yyl1390 > 0 {
		var yyrr1390, yyrl1390 int
		var yyrt1390 bool
		if yyl1390 > cap(yyv1390) {

			yyrg1390 := len(yyv1390) > 0
			yyv21390 := yyv1390
			yyrl1390, yyrt1390 = z.DecInferLen(yyl1390, z.DecBasicHandle().MaxInitLen, 728)
			if yyrt1390 {
				if yyrl1390 <= cap(yyv1390) {
					yyv1390 = yyv1390[:yyrl1390]
				} else {
					yyv1390 = make([]DaemonSet, yyrl1390)
				}
			} else {
				yyv1390 = make([]DaemonSet, yyrl1390)
			}
			yyc1390 = true
			yyrr1390 = len(yyv1390)
			if yyrg1390 {
				copy(yyv1390, yyv21390)
			}
		} else if yyl1390 != len(yyv1390) {
			yyv1390 = yyv1390[:yyl1390]
			yyc1390 = true
		}
		yyj1390 := 0
		for ; yyj1390 < yyrr1390; yyj1390++ {
			yyh1390.ElemContainerState(yyj1390)
			if r.TryDecodeAsNil() {
				yyv1390[yyj1390] = DaemonSet{}
			} else {
				yyv1391 := &yyv1390[yyj1390]
				yyv1391.CodecDecodeSelf(d)
			}

		}
		if yyrt1390 {
			for ; yyj1390 < yyl1390; yyj1390++ {
				yyv1390 = append(yyv1390, DaemonSet{})
				yyh1390.ElemContainerState(yyj1390)
				if r.TryDecodeAsNil() {
					yyv1390[yyj1390] = DaemonSet{}
				} else {
					yyv1392 := &yyv1390[yyj1390]
					yyv1392.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1390 := 0
		for ; !r.CheckBreak(); yyj1390++ {

			if yyj1390 >= len(yyv1390) {
				yyv1390 = append(yyv1390, DaemonSet{}) // var yyz1390 DaemonSet
				yyc1390 = true
			}
			yyh1390.ElemContainerState(yyj1390)
			if yyj1390 < len(yyv1390) {
				if r.TryDecodeAsNil() {
					yyv1390[yyj1390] = DaemonSet{}
				} else {
					yyv1393 := &yyv1390[yyj1390]
					yyv1393.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1390 < len(yyv1390) {
			yyv1390 = yyv1390[:yyj1390]
			yyc1390 = true
		} else if yyj1390 == 0 && yyv1390 == nil {
			yyv1390 = []DaemonSet{}
			yyc1390 = true
		}
	}
	yyh1390.End()
	if yyc1390 {
		*v = yyv1390
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1394 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1395 := &yyv1394
		yy1395.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1396 := *v
	yyh1396, yyl1396 := z.DecSliceHelperStart()
	var yyc1396 bool
	if yyl1396 == 0 {
		if yyv1396 == nil {
			yyv1396 = []ThirdPartyResourceData{}
			yyc1396 = true
		} else if len(yyv1396) != 0 {
			yyv1396 = yyv1396[:0]
			yyc1396 = true
		}
	} else if yyl1396 > 0 {
		var yyrr1396, yyrl1396 int
		var yyrt1396 bool
		if yyl1396 > cap(yyv1396) {

			yyrg1396 := len(yyv1396) > 0
			yyv21396 := yyv1396
			yyrl1396, yyrt1396 = z.DecInferLen(yyl1396, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt1396 {
				if yyrl1396 <= cap(yyv1396) {
					yyv1396 = yyv1396[:yyrl1396]
				} else {
					yyv1396 = make([]ThirdPartyResourceData, yyrl1396)
				}
			} else {
				yyv1396 = make([]ThirdPartyResourceData, yyrl1396)
			}
			yyc1396 = true
			yyrr1396 = len(yyv1396)
			if yyrg1396 {
				copy(yyv1396, yyv21396)
			}
		} else if yyl1396 != len(yyv1396) {
			yyv1396 = yyv1396[:yyl1396]
			yyc1396 = true
		}
		yyj1396 := 0
		for ; yyj1396 < yyrr1396; yyj1396++ {
			yyh1396.ElemContainerState(yyj1396)
			if r.TryDecodeAsNil() {
				yyv1396[yyj1396] = ThirdPartyResourceData{}
			} else {
				yyv1397 := &yyv1396[yyj1396]
				yyv1397.CodecDecodeSelf(d)
			}

		}
		if yyrt1396 {
			for ; yyj1396 < yyl1396; yyj1396++ {
				yyv1396 = append(yyv1396, ThirdPartyResourceData{})
				yyh1396.ElemContainerState(yyj1396)
				if r.TryDecodeAsNil() {
					yyv1396[yyj1396] = ThirdPartyResourceData{}
				} else {
					yyv1398 := &yyv1396[yyj1396]
					yyv1398.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1396 := 0
		for ; !r.CheckBreak(); yyj1396++ {

			if yyj1396 >= len(yyv1396) {
				yyv1396 = append(yyv1396, ThirdPartyResourceData{}) // var yyz1396 ThirdPartyResourceData
				yyc1396 = true
			}
			yyh1396.ElemContainerState(yyj1396)
			if yyj1396 < len(yyv1396) {
				if r.TryDecodeAsNil() {
					yyv1396[yyj1396] = ThirdPartyResourceData{}
				} else {
					yyv1399 := &yyv1396[yyj1396]
					yyv1399.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1396 < len(yyv1396) {
			yyv1396 = yyv1396[:yyj1396]
			yyc1396 = true
		} else if yyj1396 == 0 && yyv1396 == nil {
			yyv1396 = []ThirdPartyResourceData{}
			yyc1396 = true
		}
	}
	yyh1396.End()
	if yyc1396 {
		*v = yyv1396
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1400 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1401 := &yyv1400
		yy1401.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1402 := *v
	yyh1402, yyl1402 := z.DecSliceHelperStart()
	var yyc1402 bool
	if yyl1402 == 0 {
		if yyv1402 == nil {
			yyv1402 = []Ingress{}
			yyc1402 = true
		} else if len(yyv1402) != 0 {
			yyv1402 = yyv1402[:0]
			yyc1402 = true
		}
	} else if yyl1402 > 0 {
		var yyrr1402, yyrl1402 int
		var yyrt1402 bool
		if yyl1402 > cap(yyv1402) {

			yyrg1402 := len(yyv1402) > 0
			yyv21402 := yyv1402
			yyrl1402, yyrt1402 = z.DecInferLen(yyl1402, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt1402 {
				if yyrl1402 <= cap(yyv1402) {
					yyv1402 = yyv1402[:yyrl1402]
				} else {
					yyv1402 = make([]Ingress, yyrl1402)
				}
			} else {
				yyv1402 = make([]Ingress, yyrl1402)
			}
			yyc1402 = true
			yyrr1402 = len(yyv1402)
			if yyrg1402 {
				copy(yyv1402, yyv21402)
			}
		} else if yyl1402 != len(yyv1402) {
			yyv1402 = yyv1402[:yyl1402]
			yyc1402 = true
		}
		yyj1402 := 0
		for ; yyj1402 < yyrr1402; yyj1402++ {
			yyh1402.ElemContainerState(yyj1402)
			if r.TryDecodeAsNil() {
				yyv1402[yyj1402] = Ingress{}
			} else {
				yyv1403 := &yyv1402[yyj1402]
				yyv1403.CodecDecodeSelf(d)
			}

		}
		if yyrt1402 {
			for ; yyj1402 < yyl1402; yyj1402++ {
				yyv1402 = append(yyv1402, Ingress{})
				yyh1402.ElemContainerState(yyj1402)
				if r.TryDecodeAsNil() {
					yyv1402[yyj1402] = Ingress{}
				} else {
					yyv1404 := &yyv1402[yyj1402]
					yyv1404.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1402 := 0
		for ; !r.CheckBreak(); yyj1402++ {

			if yyj1402 >= len(yyv1402) {
				yyv1402 = append(yyv1402, Ingress{}) // var yyz1402 Ingress
				yyc1402 = true
			}
			yyh1402.ElemContainerState(yyj1402)
			if yyj1402 < len(yyv1402) {
				if r.TryDecodeAsNil() {
					yyv1402[yyj1402] = Ingress{}
				} else {
					yyv1405 := &yyv1402[yyj1402]
					yyv1405.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1402 < len(yyv1402) {
			yyv1402 = yyv1402[:yyj1402]
			yyc1402 = true
		} else if yyj1402 == 0 && yyv1402 == nil {
			yyv1402 = []Ingress{}
			yyc1402 = true
		}
	}
	yyh1402.End()
	if yyc1402 {
		*v = yyv1402
	}
}

func (x codecSelfer1234) encSliceIngressTLS(v []IngressTLS, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1406 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1407 := &yyv1406
		yy1407.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressTLS(v *[]IngressTLS, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1408 := *v
	yyh1408, yyl1408 := z.DecSliceHelperStart()
	var yyc1408 bool
	if yyl1408 == 0 {
		if yyv1408 == nil {
			yyv1408 = []IngressTLS{}
			yyc1408 = true
		} else if len(yyv1408) != 0 {
			yyv1408 = yyv1408[:0]
			yyc1408 = true
		}
	} else if yyl1408 > 0 {
		var yyrr1408, yyrl1408 int
		var yyrt1408 bool
		if yyl1408 > cap(yyv1408) {

			yyrg1408 := len(yyv1408) > 0
			yyv21408 := yyv1408
			yyrl1408, yyrt1408 = z.DecInferLen(yyl1408, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1408 {
				if yyrl1408 <= cap(yyv1408) {
					yyv1408 = yyv1408[:yyrl1408]
				} else {
					yyv1408 = make([]IngressTLS, yyrl1408)
				}
			} else {
				yyv1408 = make([]IngressTLS, yyrl1408)
			}
			yyc1408 = true
			yyrr1408 = len(yyv1408)
			if yyrg1408 {
				copy(yyv1408, yyv21408)
			}
		} else if yyl1408 != len(yyv1408) {
			yyv1408 = yyv1408[:yyl1408]
			yyc1408 = true
		}
		yyj1408 := 0
		for ; yyj1408 < yyrr1408; yyj1408++ {
			yyh1408.ElemContainerState(yyj1408)
			if r.TryDecodeAsNil() {
				yyv1408[yyj1408] = IngressTLS{}
			} else {
				yyv1409 := &yyv1408[yyj1408]
				yyv1409.CodecDecodeSelf(d)
			}

		}
		if yyrt1408 {
			for ; yyj1408 < yyl1408; yyj1408++ {
				yyv1408 = append(yyv1408, IngressTLS{})
				yyh1408.ElemContainerState(yyj1408)
				if r.TryDecodeAsNil() {
					yyv1408[yyj1408] = IngressTLS{}
				} else {
					yyv1410 := &yyv1408[yyj1408]
					yyv1410.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1408 := 0
		for ; !r.CheckBreak(); yyj1408++ {

			if yyj1408 >= len(yyv1408) {
				yyv1408 = append(yyv1408, IngressTLS{}) // var yyz1408 IngressTLS
				yyc1408 = true
			}
			yyh1408.ElemContainerState(yyj1408)
			if yyj1408 < len(yyv1408) {
				if r.TryDecodeAsNil() {
					yyv1408[yyj1408] = IngressTLS{}
				} else {
					yyv1411 := &yyv1408[yyj1408]
					yyv1411.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1408 < len(yyv1408) {
			yyv1408 = yyv1408[:yyj1408]
			yyc1408 = true
		} else if yyj1408 == 0 && yyv1408 == nil {
			yyv1408 = []IngressTLS{}
			yyc1408 = true
		}
	}
	yyh1408.End()
	if yyc1408 {
		*v = yyv1408
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1412 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1413 := &yyv1412
		yy1413.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1414 := *v
	yyh1414, yyl1414 := z.DecSliceHelperStart()
	var yyc1414 bool
	if yyl1414 == 0 {
		if yyv1414 == nil {
			yyv1414 = []IngressRule{}
			yyc1414 = true
		} else if len(yyv1414) != 0 {
			yyv1414 = yyv1414[:0]
			yyc1414 = true
		}
	} else if yyl1414 > 0 {
		var yyrr1414, yyrl1414 int
		var yyrt1414 bool
		if yyl1414 > cap(yyv1414) {

			yyrg1414 := len(yyv1414) > 0
			yyv21414 := yyv1414
			yyrl1414, yyrt1414 = z.DecInferLen(yyl1414, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1414 {
				if yyrl1414 <= cap(yyv1414) {
					yyv1414 = yyv1414[:yyrl1414]
				} else {
					yyv1414 = make([]IngressRule, yyrl1414)
				}
			} else {
				yyv1414 = make([]IngressRule, yyrl1414)
			}
			yyc1414 = true
			yyrr1414 = len(yyv1414)
			if yyrg1414 {
				copy(yyv1414, yyv21414)
			}
		} else if yyl1414 != len(yyv1414) {
			yyv1414 = yyv1414[:yyl1414]
			yyc1414 = true
		}
		yyj1414 := 0
		for ; yyj1414 < yyrr1414; yyj1414++ {
			yyh1414.ElemContainerState(yyj1414)
			if r.TryDecodeAsNil() {
				yyv1414[yyj1414] = IngressRule{}
			} else {
				yyv1415 := &yyv1414[yyj1414]
				yyv1415.CodecDecodeSelf(d)
			}

		}
		if yyrt1414 {
			for ; yyj1414 < yyl1414; yyj1414++ {
				yyv1414 = append(yyv1414, IngressRule{})
				yyh1414.ElemContainerState(yyj1414)
				if r.TryDecodeAsNil() {
					yyv1414[yyj1414] = IngressRule{}
				} else {
					yyv1416 := &yyv1414[yyj1414]
					yyv1416.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1414 := 0
		for ; !r.CheckBreak(); yyj1414++ {

			if yyj1414 >= len(yyv1414) {
				yyv1414 = append(yyv1414, IngressRule{}) // var yyz1414 IngressRule
				yyc1414 = true
			}
			yyh1414.ElemContainerState(yyj1414)
			if yyj1414 < len(yyv1414) {
				if r.TryDecodeAsNil() {
					yyv1414[yyj1414] = IngressRule{}
				} else {
					yyv1417 := &yyv1414[yyj1414]
					yyv1417.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1414 < len(yyv1414) {
			yyv1414 = yyv1414[:yyj1414]
			yyc1414 = true
		} else if yyj1414 == 0 && yyv1414 == nil {
			yyv1414 = []IngressRule{}
			yyc1414 = true
		}
	}
	yyh1414.End()
	if yyc1414 {
		*v = yyv1414
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1418 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1419 := &yyv1418
		yy1419.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1420 := *v
	yyh1420, yyl1420 := z.DecSliceHelperStart()
	var yyc1420 bool
	if yyl1420 == 0 {
		if yyv1420 == nil {
			yyv1420 = []HTTPIngressPath{}
			yyc1420 = true
		} else if len(yyv1420) != 0 {
			yyv1420 = yyv1420[:0]
			yyc1420 = true
		}
	} else if yyl1420 > 0 {
		var yyrr1420, yyrl1420 int
		var yyrt1420 bool
		if yyl1420 > cap(yyv1420) {

			yyrg1420 := len(yyv1420) > 0
			yyv21420 := yyv1420
			yyrl1420, yyrt1420 = z.DecInferLen(yyl1420, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1420 {
				if yyrl1420 <= cap(yyv1420) {
					yyv1420 = yyv1420[:yyrl1420]
				} else {
					yyv1420 = make([]HTTPIngressPath, yyrl1420)
				}
			} else {
				yyv1420 = make([]HTTPIngressPath, yyrl1420)
			}
			yyc1420 = true
			yyrr1420 = len(yyv1420)
			if yyrg1420 {
				copy(yyv1420, yyv21420)
			}
		} else if yyl1420 != len(yyv1420) {
			yyv1420 = yyv1420[:yyl1420]
			yyc1420 = true
		}
		yyj1420 := 0
		for ; yyj1420 < yyrr1420; yyj1420++ {
			yyh1420.ElemContainerState(yyj1420)
			if r.TryDecodeAsNil() {
				yyv1420[yyj1420] = HTTPIngressPath{}
			} else {
				yyv1421 := &yyv1420[yyj1420]
				yyv1421.CodecDecodeSelf(d)
			}

		}
		if yyrt1420 {
			for ; yyj1420 < yyl1420; yyj1420++ {
				yyv1420 = append(yyv1420, HTTPIngressPath{})
				yyh1420.ElemContainerState(yyj1420)
				if r.TryDecodeAsNil() {
					yyv1420[yyj1420] = HTTPIngressPath{}
				} else {
					yyv1422 := &yyv1420[yyj1420]
					yyv1422.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1420 := 0
		for ; !r.CheckBreak(); yyj1420++ {

			if yyj1420 >= len(yyv1420) {
				yyv1420 = append(yyv1420, HTTPIngressPath{}) // var yyz1420 HTTPIngressPath
				yyc1420 = true
			}
			yyh1420.ElemContainerState(yyj1420)
			if yyj1420 < len(yyv1420) {
				if r.TryDecodeAsNil() {
					yyv1420[yyj1420] = HTTPIngressPath{}
				} else {
					yyv1423 := &yyv1420[yyj1420]
					yyv1423.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1420 < len(yyv1420) {
			yyv1420 = yyv1420[:yyj1420]
			yyc1420 = true
		} else if yyj1420 == 0 && yyv1420 == nil {
			yyv1420 = []HTTPIngressPath{}
			yyc1420 = true
		}
	}
	yyh1420.End()
	if yyc1420 {
		*v = yyv1420
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1424 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1425 := &yyv1424
		yy1425.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1426 := *v
	yyh1426, yyl1426 := z.DecSliceHelperStart()
	var yyc1426 bool
	if yyl1426 == 0 {
		if yyv1426 == nil {
			yyv1426 = []ReplicaSet{}
			yyc1426 = true
		} else if len(yyv1426) != 0 {
			yyv1426 = yyv1426[:0]
			yyc1426 = true
		}
	} else if yyl1426 > 0 {
		var yyrr1426, yyrl1426 int
		var yyrt1426 bool
		if yyl1426 > cap(yyv1426) {

			yyrg1426 := len(yyv1426) > 0
			yyv21426 := yyv1426
			yyrl1426, yyrt1426 = z.DecInferLen(yyl1426, z.DecBasicHandle().MaxInitLen, 768)
			if yyrt1426 {
				if yyrl1426 <= cap(yyv1426) {
					yyv1426 = yyv1426[:yyrl1426]
				} else {
					yyv1426 = make([]ReplicaSet, yyrl1426)
				}
			} else {
				yyv1426 = make([]ReplicaSet, yyrl1426)
			}
			yyc1426 = true
			yyrr1426 = len(yyv1426)
			if yyrg1426 {
				copy(yyv1426, yyv21426)
			}
		} else if yyl1426 != len(yyv1426) {
			yyv1426 = yyv1426[:yyl1426]
			yyc1426 = true
		}
		yyj1426 := 0
		for ; yyj1426 < yyrr1426; yyj1426++ {
			yyh1426.ElemContainerState(yyj1426)
			if r.TryDecodeAsNil() {
				yyv1426[yyj1426] = ReplicaSet{}
			} else {
				yyv1427 := &yyv1426[yyj1426]
				yyv1427.CodecDecodeSelf(d)
			}

		}
		if yyrt1426 {
			for ; yyj1426 < yyl1426; yyj1426++ {
				yyv1426 = append(yyv1426, ReplicaSet{})
				yyh1426.ElemContainerState(yyj1426)
				if r.TryDecodeAsNil() {
					yyv1426[yyj1426] = ReplicaSet{}
				} else {
					yyv1428 := &yyv1426[yyj1426]
					yyv1428.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1426 := 0
		for ; !r.CheckBreak(); yyj1426++ {

			if yyj1426 >= len(yyv1426) {
				yyv1426 = append(yyv1426, ReplicaSet{}) // var yyz1426 ReplicaSet
				yyc1426 = true
			}
			yyh1426.ElemContainerState(yyj1426)
			if yyj1426 < len(yyv1426) {
				if r.TryDecodeAsNil() {
					yyv1426[yyj1426] = ReplicaSet{}
				} else {
					yyv1429 := &yyv1426[yyj1426]
					yyv1429.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1426 < len(yyv1426) {
			yyv1426 = yyv1426[:yyj1426]
			yyc1426 = true
		} else if yyj1426 == 0 && yyv1426 == nil {
			yyv1426 = []ReplicaSet{}
			yyc1426 = true
		}
	}
	yyh1426.End()
	if yyc1426 {
		*v = yyv1426
	}
}

func (x codecSelfer1234) encSliceReplicaSetCondition(v []ReplicaSetCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1430 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1431 := &yyv1430
		yy1431.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSetCondition(v *[]ReplicaSetCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1432 := *v
	yyh1432, yyl1432 := z.DecSliceHelperStart()
	var yyc1432 bool
	if yyl1432 == 0 {
		if yyv1432 == nil {
			yyv1432 = []ReplicaSetCondition{}
			yyc1432 = true
		} else if len(yyv1432) != 0 {
			yyv1432 = yyv1432[:0]
			yyc1432 = true
		}
	} else if yyl1432 > 0 {
		var yyrr1432, yyrl1432 int
		var yyrt1432 bool
		if yyl1432 > cap(yyv1432) {

			yyrg1432 := len(yyv1432) > 0
			yyv21432 := yyv1432
			yyrl1432, yyrt1432 = z.DecInferLen(yyl1432, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1432 {
				if yyrl1432 <= cap(yyv1432) {
					yyv1432 = yyv1432[:yyrl1432]
				} else {
					yyv1432 = make([]ReplicaSetCondition, yyrl1432)
				}
			} else {
				yyv1432 = make([]ReplicaSetCondition, yyrl1432)
			}
			yyc1432 = true
			yyrr1432 = len(yyv1432)
			if yyrg1432 {
				copy(yyv1432, yyv21432)
			}
		} else if yyl1432 != len(yyv1432) {
			yyv1432 = yyv1432[:yyl1432]
			yyc1432 = true
		}
		yyj1432 := 0
		for ; yyj1432 < yyrr1432; yyj1432++ {
			yyh1432.ElemContainerState(yyj1432)
			if r.TryDecodeAsNil() {
				yyv1432[yyj1432] = ReplicaSetCondition{}
			} else {
				yyv1433 := &yyv1432[yyj1432]
				yyv1433.CodecDecodeSelf(d)
			}

		}
		if yyrt1432 {
			for ; yyj1432 < yyl1432; yyj1432++ {
				yyv1432 = append(yyv1432, ReplicaSetCondition{})
				yyh1432.ElemContainerState(yyj1432)
				if r.TryDecodeAsNil() {
					yyv1432[yyj1432] = ReplicaSetCondition{}
				} else {
					yyv1434 := &yyv1432[yyj1432]
					yyv1434.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1432 := 0
		for ; !r.CheckBreak(); yyj1432++ {

			if yyj1432 >= len(yyv1432) {
				yyv1432 = append(yyv1432, ReplicaSetCondition{}) // var yyz1432 ReplicaSetCondition
				yyc1432 = true
			}
			yyh1432.ElemContainerState(yyj1432)
			if yyj1432 < len(yyv1432) {
				if r.TryDecodeAsNil() {
					yyv1432[yyj1432] = ReplicaSetCondition{}
				} else {
					yyv1435 := &yyv1432[yyj1432]
					yyv1435.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1432 < len(yyv1432) {
			yyv1432 = yyv1432[:yyj1432]
			yyc1432 = true
		} else if yyj1432 == 0 && yyv1432 == nil {
			yyv1432 = []ReplicaSetCondition{}
			yyc1432 = true
		}
	}
	yyh1432.End()
	if yyc1432 {
		*v = yyv1432
	}
}

func (x codecSelfer1234) encSliceapi_Capability(v []pkg2_api.Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1436 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yym1437 := z.EncBinary()
		_ = yym1437
		if false {
		} else if z.HasExtensions() && z.EncExt(yyv1436) {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyv1436))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceapi_Capability(v *[]pkg2_api.Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1438 := *v
	yyh1438, yyl1438 := z.DecSliceHelperStart()
	var yyc1438 bool
	if yyl1438 == 0 {
		if yyv1438 == nil {
			yyv1438 = []pkg2_api.Capability{}
			yyc1438 = true
		} else if len(yyv1438) != 0 {
			yyv1438 = yyv1438[:0]
			yyc1438 = true
		}
	} else if yyl1438 > 0 {
		var yyrr1438, yyrl1438 int
		var yyrt1438 bool
		if yyl1438 > cap(yyv1438) {

			yyrl1438, yyrt1438 = z.DecInferLen(yyl1438, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1438 {
				if yyrl1438 <= cap(yyv1438) {
					yyv1438 = yyv1438[:yyrl1438]
				} else {
					yyv1438 = make([]pkg2_api.Capability, yyrl1438)
				}
			} else {
				yyv1438 = make([]pkg2_api.Capability, yyrl1438)
			}
			yyc1438 = true
			yyrr1438 = len(yyv1438)
		} else if yyl1438 != len(yyv1438) {
			yyv1438 = yyv1438[:yyl1438]
			yyc1438 = true
		}
		yyj1438 := 0
		for ; yyj1438 < yyrr1438; yyj1438++ {
			yyh1438.ElemContainerState(yyj1438)
			if r.TryDecodeAsNil() {
				yyv1438[yyj1438] = ""
			} else {
				yyv1438[yyj1438] = pkg2_api.Capability(r.DecodeString())
			}

		}
		if yyrt1438 {
			for ; yyj1438 < yyl1438; yyj1438++ {
				yyv1438 = append(yyv1438, "")
				yyh1438.ElemContainerState(yyj1438)
				if r.TryDecodeAsNil() {
					yyv1438[yyj1438] = ""
				} else {
					yyv1438[yyj1438] = pkg2_api.Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj1438 := 0
		for ; !r.CheckBreak(); yyj1438++ {

			if yyj1438 >= len(yyv1438) {
				yyv1438 = append(yyv1438, "") // var yyz1438 pkg2_api.Capability
				yyc1438 = true
			}
			yyh1438.ElemContainerState(yyj1438)
			if yyj1438 < len(yyv1438) {
				if r.TryDecodeAsNil() {
					yyv1438[yyj1438] = ""
				} else {
					yyv1438[yyj1438] = pkg2_api.Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1438 < len(yyv1438) {
			yyv1438 = yyv1438[:yyj1438]
			yyc1438 = true
		} else if yyj1438 == 0 && yyv1438 == nil {
			yyv1438 = []pkg2_api.Capability{}
			yyc1438 = true
		}
	}
	yyh1438.End()
	if yyc1438 {
		*v = yyv1438
	}
}

func (x codecSelfer1234) encSliceFSType(v []FSType, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1442 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv1442.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFSType(v *[]FSType, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1443 := *v
	yyh1443, yyl1443 := z.DecSliceHelperStart()
	var yyc1443 bool
	if yyl1443 == 0 {
		if yyv1443 == nil {
			yyv1443 = []FSType{}
			yyc1443 = true
		} else if len(yyv1443) != 0 {
			yyv1443 = yyv1443[:0]
			yyc1443 = true
		}
	} else if yyl1443 > 0 {
		var yyrr1443, yyrl1443 int
		var yyrt1443 bool
		if yyl1443 > cap(yyv1443) {

			yyrl1443, yyrt1443 = z.DecInferLen(yyl1443, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1443 {
				if yyrl1443 <= cap(yyv1443) {
					yyv1443 = yyv1443[:yyrl1443]
				} else {
					yyv1443 = make([]FSType, yyrl1443)
				}
			} else {
				yyv1443 = make([]FSType, yyrl1443)
			}
			yyc1443 = true
			yyrr1443 = len(yyv1443)
		} else if yyl1443 != len(yyv1443) {
			yyv1443 = yyv1443[:yyl1443]
			yyc1443 = true
		}
		yyj1443 := 0
		for ; yyj1443 < yyrr1443; yyj1443++ {
			yyh1443.ElemContainerState(yyj1443)
			if r.TryDecodeAsNil() {
				yyv1443[yyj1443] = ""
			} else {
				yyv1443[yyj1443] = FSType(r.DecodeString())
			}

		}
		if yyrt1443 {
			for ; yyj1443 < yyl1443; yyj1443++ {
				yyv1443 = append(yyv1443, "")
				yyh1443.ElemContainerState(yyj1443)
				if r.TryDecodeAsNil() {
					yyv1443[yyj1443] = ""
				} else {
					yyv1443[yyj1443] = FSType(r.DecodeString())
				}

			}
		}

	} else {
		yyj1443 := 0
		for ; !r.CheckBreak(); yyj1443++ {

			if yyj1443 >= len(yyv1443) {
				yyv1443 = append(yyv1443, "") // var yyz1443 FSType
				yyc1443 = true
			}
			yyh1443.ElemContainerState(yyj1443)
			if yyj1443 < len(yyv1443) {
				if r.TryDecodeAsNil() {
					yyv1443[yyj1443] = ""
				} else {
					yyv1443[yyj1443] = FSType(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1443 < len(yyv1443) {
			yyv1443 = yyv1443[:yyj1443]
			yyc1443 = true
		} else if yyj1443 == 0 && yyv1443 == nil {
			yyv1443 = []FSType{}
			yyc1443 = true
		}
	}
	yyh1443.End()
	if yyc1443 {
		*v = yyv1443
	}
}

func (x codecSelfer1234) encSliceHostPortRange(v []HostPortRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1447 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1448 := &yyv1447
		yy1448.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHostPortRange(v *[]HostPortRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1449 := *v
	yyh1449, yyl1449 := z.DecSliceHelperStart()
	var yyc1449 bool
	if yyl1449 == 0 {
		if yyv1449 == nil {
			yyv1449 = []HostPortRange{}
			yyc1449 = true
		} else if len(yyv1449) != 0 {
			yyv1449 = yyv1449[:0]
			yyc1449 = true
		}
	} else if yyl1449 > 0 {
		var yyrr1449, yyrl1449 int
		var yyrt1449 bool
		if yyl1449 > cap(yyv1449) {

			yyrg1449 := len(yyv1449) > 0
			yyv21449 := yyv1449
			yyrl1449, yyrt1449 = z.DecInferLen(yyl1449, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1449 {
				if yyrl1449 <= cap(yyv1449) {
					yyv1449 = yyv1449[:yyrl1449]
				} else {
					yyv1449 = make([]HostPortRange, yyrl1449)
				}
			} else {
				yyv1449 = make([]HostPortRange, yyrl1449)
			}
			yyc1449 = true
			yyrr1449 = len(yyv1449)
			if yyrg1449 {
				copy(yyv1449, yyv21449)
			}
		} else if yyl1449 != len(yyv1449) {
			yyv1449 = yyv1449[:yyl1449]
			yyc1449 = true
		}
		yyj1449 := 0
		for ; yyj1449 < yyrr1449; yyj1449++ {
			yyh1449.ElemContainerState(yyj1449)
			if r.TryDecodeAsNil() {
				yyv1449[yyj1449] = HostPortRange{}
			} else {
				yyv1450 := &yyv1449[yyj1449]
				yyv1450.CodecDecodeSelf(d)
			}

		}
		if yyrt1449 {
			for ; yyj1449 < yyl1449; yyj1449++ {
				yyv1449 = append(yyv1449, HostPortRange{})
				yyh1449.ElemContainerState(yyj1449)
				if r.TryDecodeAsNil() {
					yyv1449[yyj1449] = HostPortRange{}
				} else {
					yyv1451 := &yyv1449[yyj1449]
					yyv1451.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1449 := 0
		for ; !r.CheckBreak(); yyj1449++ {

			if yyj1449 >= len(yyv1449) {
				yyv1449 = append(yyv1449, HostPortRange{}) // var yyz1449 HostPortRange
				yyc1449 = true
			}
			yyh1449.ElemContainerState(yyj1449)
			if yyj1449 < len(yyv1449) {
				if r.TryDecodeAsNil() {
					yyv1449[yyj1449] = HostPortRange{}
				} else {
					yyv1452 := &yyv1449[yyj1449]
					yyv1452.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1449 < len(yyv1449) {
			yyv1449 = yyv1449[:yyj1449]
			yyc1449 = true
		} else if yyj1449 == 0 && yyv1449 == nil {
			yyv1449 = []HostPortRange{}
			yyc1449 = true
		}
	}
	yyh1449.End()
	if yyc1449 {
		*v = yyv1449
	}
}

func (x codecSelfer1234) encSliceIDRange(v []IDRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1453 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1454 := &yyv1453
		yy1454.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIDRange(v *[]IDRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1455 := *v
	yyh1455, yyl1455 := z.DecSliceHelperStart()
	var yyc1455 bool
	if yyl1455 == 0 {
		if yyv1455 == nil {
			yyv1455 = []IDRange{}
			yyc1455 = true
		} else if len(yyv1455) != 0 {
			yyv1455 = yyv1455[:0]
			yyc1455 = true
		}
	} else if yyl1455 > 0 {
		var yyrr1455, yyrl1455 int
		var yyrt1455 bool
		if yyl1455 > cap(yyv1455) {

			yyrg1455 := len(yyv1455) > 0
			yyv21455 := yyv1455
			yyrl1455, yyrt1455 = z.DecInferLen(yyl1455, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1455 {
				if yyrl1455 <= cap(yyv1455) {
					yyv1455 = yyv1455[:yyrl1455]
				} else {
					yyv1455 = make([]IDRange, yyrl1455)
				}
			} else {
				yyv1455 = make([]IDRange, yyrl1455)
			}
			yyc1455 = true
			yyrr1455 = len(yyv1455)
			if yyrg1455 {
				copy(yyv1455, yyv21455)
			}
		} else if yyl1455 != len(yyv1455) {
			yyv1455 = yyv1455[:yyl1455]
			yyc1455 = true
		}
		yyj1455 := 0
		for ; yyj1455 < yyrr1455; yyj1455++ {
			yyh1455.ElemContainerState(yyj1455)
			if r.TryDecodeAsNil() {
				yyv1455[yyj1455] = IDRange{}
			} else {
				yyv1456 := &yyv1455[yyj1455]
				yyv1456.CodecDecodeSelf(d)
			}

		}
		if yyrt1455 {
			for ; yyj1455 < yyl1455; yyj1455++ {
				yyv1455 = append(yyv1455, IDRange{})
				yyh1455.ElemContainerState(yyj1455)
				if r.TryDecodeAsNil() {
					yyv1455[yyj1455] = IDRange{}
				} else {
					yyv1457 := &yyv1455[yyj1455]
					yyv1457.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1455 := 0
		for ; !r.CheckBreak(); yyj1455++ {

			if yyj1455 >= len(yyv1455) {
				yyv1455 = append(yyv1455, IDRange{}) // var yyz1455 IDRange
				yyc1455 = true
			}
			yyh1455.ElemContainerState(yyj1455)
			if yyj1455 < len(yyv1455) {
				if r.TryDecodeAsNil() {
					yyv1455[yyj1455] = IDRange{}
				} else {
					yyv1458 := &yyv1455[yyj1455]
					yyv1458.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1455 < len(yyv1455) {
			yyv1455 = yyv1455[:yyj1455]
			yyc1455 = true
		} else if yyj1455 == 0 && yyv1455 == nil {
			yyv1455 = []IDRange{}
			yyc1455 = true
		}
	}
	yyh1455.End()
	if yyc1455 {
		*v = yyv1455
	}
}

func (x codecSelfer1234) encSlicePodSecurityPolicy(v []PodSecurityPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1459 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1460 := &yyv1459
		yy1460.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodSecurityPolicy(v *[]PodSecurityPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1461 := *v
	yyh1461, yyl1461 := z.DecSliceHelperStart()
	var yyc1461 bool
	if yyl1461 == 0 {
		if yyv1461 == nil {
			yyv1461 = []PodSecurityPolicy{}
			yyc1461 = true
		} else if len(yyv1461) != 0 {
			yyv1461 = yyv1461[:0]
			yyc1461 = true
		}
	} else if yyl1461 > 0 {
		var yyrr1461, yyrl1461 int
		var yyrt1461 bool
		if yyl1461 > cap(yyv1461) {

			yyrg1461 := len(yyv1461) > 0
			yyv21461 := yyv1461
			yyrl1461, yyrt1461 = z.DecInferLen(yyl1461, z.DecBasicHandle().MaxInitLen, 552)
			if yyrt1461 {
				if yyrl1461 <= cap(yyv1461) {
					yyv1461 = yyv1461[:yyrl1461]
				} else {
					yyv1461 = make([]PodSecurityPolicy, yyrl1461)
				}
			} else {
				yyv1461 = make([]PodSecurityPolicy, yyrl1461)
			}
			yyc1461 = true
			yyrr1461 = len(yyv1461)
			if yyrg1461 {
				copy(yyv1461, yyv21461)
			}
		} else if yyl1461 != len(yyv1461) {
			yyv1461 = yyv1461[:yyl1461]
			yyc1461 = true
		}
		yyj1461 := 0
		for ; yyj1461 < yyrr1461; yyj1461++ {
			yyh1461.ElemContainerState(yyj1461)
			if r.TryDecodeAsNil() {
				yyv1461[yyj1461] = PodSecurityPolicy{}
			} else {
				yyv1462 := &yyv1461[yyj1461]
				yyv1462.CodecDecodeSelf(d)
			}

		}
		if yyrt1461 {
			for ; yyj1461 < yyl1461; yyj1461++ {
				yyv1461 = append(yyv1461, PodSecurityPolicy{})
				yyh1461.ElemContainerState(yyj1461)
				if r.TryDecodeAsNil() {
					yyv1461[yyj1461] = PodSecurityPolicy{}
				} else {
					yyv1463 := &yyv1461[yyj1461]
					yyv1463.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1461 := 0
		for ; !r.CheckBreak(); yyj1461++ {

			if yyj1461 >= len(yyv1461) {
				yyv1461 = append(yyv1461, PodSecurityPolicy{}) // var yyz1461 PodSecurityPolicy
				yyc1461 = true
			}
			yyh1461.ElemContainerState(yyj1461)
			if yyj1461 < len(yyv1461) {
				if r.TryDecodeAsNil() {
					yyv1461[yyj1461] = PodSecurityPolicy{}
				} else {
					yyv1464 := &yyv1461[yyj1461]
					yyv1464.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1461 < len(yyv1461) {
			yyv1461 = yyv1461[:yyj1461]
			yyc1461 = true
		} else if yyj1461 == 0 && yyv1461 == nil {
			yyv1461 = []PodSecurityPolicy{}
			yyc1461 = true
		}
	}
	yyh1461.End()
	if yyc1461 {
		*v = yyv1461
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyIngressRule(v []NetworkPolicyIngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1465 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1466 := &yyv1465
		yy1466.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyIngressRule(v *[]NetworkPolicyIngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1467 := *v
	yyh1467, yyl1467 := z.DecSliceHelperStart()
	var yyc1467 bool
	if yyl1467 == 0 {
		if yyv1467 == nil {
			yyv1467 = []NetworkPolicyIngressRule{}
			yyc1467 = true
		} else if len(yyv1467) != 0 {
			yyv1467 = yyv1467[:0]
			yyc1467 = true
		}
	} else if yyl1467 > 0 {
		var yyrr1467, yyrl1467 int
		var yyrt1467 bool
		if yyl1467 > cap(yyv1467) {

			yyrg1467 := len(yyv1467) > 0
			yyv21467 := yyv1467
			yyrl1467, yyrt1467 = z.DecInferLen(yyl1467, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt1467 {
				if yyrl1467 <= cap(yyv1467) {
					yyv1467 = yyv1467[:yyrl1467]
				} else {
					yyv1467 = make([]NetworkPolicyIngressRule, yyrl1467)
				}
			} else {
				yyv1467 = make([]NetworkPolicyIngressRule, yyrl1467)
			}
			yyc1467 = true
			yyrr1467 = len(yyv1467)
			if yyrg1467 {
				copy(yyv1467, yyv21467)
			}
		} else if yyl1467 != len(yyv1467) {
			yyv1467 = yyv1467[:yyl1467]
			yyc1467 = true
		}
		yyj1467 := 0
		for ; yyj1467 < yyrr1467; yyj1467++ {
			yyh1467.ElemContainerState(yyj1467)
			if r.TryDecodeAsNil() {
				yyv1467[yyj1467] = NetworkPolicyIngressRule{}
			} else {
				yyv1468 := &yyv1467[yyj1467]
				yyv1468.CodecDecodeSelf(d)
			}

		}
		if yyrt1467 {
			for ; yyj1467 < yyl1467; yyj1467++ {
				yyv1467 = append(yyv1467, NetworkPolicyIngressRule{})
				yyh1467.ElemContainerState(yyj1467)
				if r.TryDecodeAsNil() {
					yyv1467[yyj1467] = NetworkPolicyIngressRule{}
				} else {
					yyv1469 := &yyv1467[yyj1467]
					yyv1469.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1467 := 0
		for ; !r.CheckBreak(); yyj1467++ {

			if yyj1467 >= len(yyv1467) {
				yyv1467 = append(yyv1467, NetworkPolicyIngressRule{}) // var yyz1467 NetworkPolicyIngressRule
				yyc1467 = true
			}
			yyh1467.ElemContainerState(yyj1467)
			if yyj1467 < len(yyv1467) {
				if r.TryDecodeAsNil() {
					yyv1467[yyj1467] = NetworkPolicyIngressRule{}
				} else {
					yyv1470 := &yyv1467[yyj1467]
					yyv1470.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1467 < len(yyv1467) {
			yyv1467 = yyv1467[:yyj1467]
			yyc1467 = true
		} else if yyj1467 == 0 && yyv1467 == nil {
			yyv1467 = []NetworkPolicyIngressRule{}
			yyc1467 = true
		}
	}
	yyh1467.End()
	if yyc1467 {
		*v = yyv1467
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPort(v []NetworkPolicyPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1471 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1472 := &yyv1471
		yy1472.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPort(v *[]NetworkPolicyPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1473 := *v
	yyh1473, yyl1473 := z.DecSliceHelperStart()
	var yyc1473 bool
	if yyl1473 == 0 {
		if yyv1473 == nil {
			yyv1473 = []NetworkPolicyPort{}
			yyc1473 = true
		} else if len(yyv1473) != 0 {
			yyv1473 = yyv1473[:0]
			yyc1473 = true
		}
	} else if yyl1473 > 0 {
		var yyrr1473, yyrl1473 int
		var yyrt1473 bool
		if yyl1473 > cap(yyv1473) {

			yyrg1473 := len(yyv1473) > 0
			yyv21473 := yyv1473
			yyrl1473, yyrt1473 = z.DecInferLen(yyl1473, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1473 {
				if yyrl1473 <= cap(yyv1473) {
					yyv1473 = yyv1473[:yyrl1473]
				} else {
					yyv1473 = make([]NetworkPolicyPort, yyrl1473)
				}
			} else {
				yyv1473 = make([]NetworkPolicyPort, yyrl1473)
			}
			yyc1473 = true
			yyrr1473 = len(yyv1473)
			if yyrg1473 {
				copy(yyv1473, yyv21473)
			}
		} else if yyl1473 != len(yyv1473) {
			yyv1473 = yyv1473[:yyl1473]
			yyc1473 = true
		}
		yyj1473 := 0
		for ; yyj1473 < yyrr1473; yyj1473++ {
			yyh1473.ElemContainerState(yyj1473)
			if r.TryDecodeAsNil() {
				yyv1473[yyj1473] = NetworkPolicyPort{}
			} else {
				yyv1474 := &yyv1473[yyj1473]
				yyv1474.CodecDecodeSelf(d)
			}

		}
		if yyrt1473 {
			for ; yyj1473 < yyl1473; yyj1473++ {
				yyv1473 = append(yyv1473, NetworkPolicyPort{})
				yyh1473.ElemContainerState(yyj1473)
				if r.TryDecodeAsNil() {
					yyv1473[yyj1473] = NetworkPolicyPort{}
				} else {
					yyv1475 := &yyv1473[yyj1473]
					yyv1475.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1473 := 0
		for ; !r.CheckBreak(); yyj1473++ {

			if yyj1473 >= len(yyv1473) {
				yyv1473 = append(yyv1473, NetworkPolicyPort{}) // var yyz1473 NetworkPolicyPort
				yyc1473 = true
			}
			yyh1473.ElemContainerState(yyj1473)
			if yyj1473 < len(yyv1473) {
				if r.TryDecodeAsNil() {
					yyv1473[yyj1473] = NetworkPolicyPort{}
				} else {
					yyv1476 := &yyv1473[yyj1473]
					yyv1476.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1473 < len(yyv1473) {
			yyv1473 = yyv1473[:yyj1473]
			yyc1473 = true
		} else if yyj1473 == 0 && yyv1473 == nil {
			yyv1473 = []NetworkPolicyPort{}
			yyc1473 = true
		}
	}
	yyh1473.End()
	if yyc1473 {
		*v = yyv1473
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPeer(v []NetworkPolicyPeer, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1477 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1478 := &yyv1477
		yy1478.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPeer(v *[]NetworkPolicyPeer, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1479 := *v
	yyh1479, yyl1479 := z.DecSliceHelperStart()
	var yyc1479 bool
	if yyl1479 == 0 {
		if yyv1479 == nil {
			yyv1479 = []NetworkPolicyPeer{}
			yyc1479 = true
		} else if len(yyv1479) != 0 {
			yyv1479 = yyv1479[:0]
			yyc1479 = true
		}
	} else if yyl1479 > 0 {
		var yyrr1479, yyrl1479 int
		var yyrt1479 bool
		if yyl1479 > cap(yyv1479) {

			yyrg1479 := len(yyv1479) > 0
			yyv21479 := yyv1479
			yyrl1479, yyrt1479 = z.DecInferLen(yyl1479, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1479 {
				if yyrl1479 <= cap(yyv1479) {
					yyv1479 = yyv1479[:yyrl1479]
				} else {
					yyv1479 = make([]NetworkPolicyPeer, yyrl1479)
				}
			} else {
				yyv1479 = make([]NetworkPolicyPeer, yyrl1479)
			}
			yyc1479 = true
			yyrr1479 = len(yyv1479)
			if yyrg1479 {
				copy(yyv1479, yyv21479)
			}
		} else if yyl1479 != len(yyv1479) {
			yyv1479 = yyv1479[:yyl1479]
			yyc1479 = true
		}
		yyj1479 := 0
		for ; yyj1479 < yyrr1479; yyj1479++ {
			yyh1479.ElemContainerState(yyj1479)
			if r.TryDecodeAsNil() {
				yyv1479[yyj1479] = NetworkPolicyPeer{}
			} else {
				yyv1480 := &yyv1479[yyj1479]
				yyv1480.CodecDecodeSelf(d)
			}

		}
		if yyrt1479 {
			for ; yyj1479 < yyl1479; yyj1479++ {
				yyv1479 = append(yyv1479, NetworkPolicyPeer{})
				yyh1479.ElemContainerState(yyj1479)
				if r.TryDecodeAsNil() {
					yyv1479[yyj1479] = NetworkPolicyPeer{}
				} else {
					yyv1481 := &yyv1479[yyj1479]
					yyv1481.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1479 := 0
		for ; !r.CheckBreak(); yyj1479++ {

			if yyj1479 >= len(yyv1479) {
				yyv1479 = append(yyv1479, NetworkPolicyPeer{}) // var yyz1479 NetworkPolicyPeer
				yyc1479 = true
			}
			yyh1479.ElemContainerState(yyj1479)
			if yyj1479 < len(yyv1479) {
				if r.TryDecodeAsNil() {
					yyv1479[yyj1479] = NetworkPolicyPeer{}
				} else {
					yyv1482 := &yyv1479[yyj1479]
					yyv1482.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1479 < len(yyv1479) {
			yyv1479 = yyv1479[:yyj1479]
			yyc1479 = true
		} else if yyj1479 == 0 && yyv1479 == nil {
			yyv1479 = []NetworkPolicyPeer{}
			yyc1479 = true
		}
	}
	yyh1479.End()
	if yyc1479 {
		*v = yyv1479
	}
}

func (x codecSelfer1234) encSliceNetworkPolicy(v []NetworkPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1483 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1484 := &yyv1483
		yy1484.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicy(v *[]NetworkPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1485 := *v
	yyh1485, yyl1485 := z.DecSliceHelperStart()
	var yyc1485 bool
	if yyl1485 == 0 {
		if yyv1485 == nil {
			yyv1485 = []NetworkPolicy{}
			yyc1485 = true
		} else if len(yyv1485) != 0 {
			yyv1485 = yyv1485[:0]
			yyc1485 = true
		}
	} else if yyl1485 > 0 {
		var yyrr1485, yyrl1485 int
		var yyrt1485 bool
		if yyl1485 > cap(yyv1485) {

			yyrg1485 := len(yyv1485) > 0
			yyv21485 := yyv1485
			yyrl1485, yyrt1485 = z.DecInferLen(yyl1485, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt1485 {
				if yyrl1485 <= cap(yyv1485) {
					yyv1485 = yyv1485[:yyrl1485]
				} else {
					yyv1485 = make([]NetworkPolicy, yyrl1485)
				}
			} else {
				yyv1485 = make([]NetworkPolicy, yyrl1485)
			}
			yyc1485 = true
			yyrr1485 = len(yyv1485)
			if yyrg1485 {
				copy(yyv1485, yyv21485)
			}
		} else if yyl1485 != len(yyv1485) {
			yyv1485 = yyv1485[:yyl1485]
			yyc1485 = true
		}
		yyj1485 := 0
		for ; yyj1485 < yyrr1485; yyj1485++ {
			yyh1485.ElemContainerState(yyj1485)
			if r.TryDecodeAsNil() {
				yyv1485[yyj1485] = NetworkPolicy{}
			} else {
				yyv1486 := &yyv1485[yyj1485]
				yyv1486.CodecDecodeSelf(d)
			}

		}
		if yyrt1485 {
			for ; yyj1485 < yyl1485; yyj1485++ {
				yyv1485 = append(yyv1485, NetworkPolicy{})
				yyh1485.ElemContainerState(yyj1485)
				if r.TryDecodeAsNil() {
					yyv1485[yyj1485] = NetworkPolicy{}
				} else {
					yyv1487 := &yyv1485[yyj1485]
					yyv1487.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1485 := 0
		for ; !r.CheckBreak(); yyj1485++ {

			if yyj1485 >= len(yyv1485) {
				yyv1485 = append(yyv1485, NetworkPolicy{}) // var yyz1485 NetworkPolicy
				yyc1485 = true
			}
			yyh1485.ElemContainerState(yyj1485)
			if yyj1485 < len(yyv1485) {
				if r.TryDecodeAsNil() {
					yyv1485[yyj1485] = NetworkPolicy{}
				} else {
					yyv1488 := &yyv1485[yyj1485]
					yyv1488.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1485 < len(yyv1485) {
			yyv1485 = yyv1485[:yyj1485]
			yyc1485 = true
		} else if yyj1485 == 0 && yyv1485 == nil {
			yyv1485 = []NetworkPolicy{}
			yyc1485 = true
		}
	}
	yyh1485.End()
	if yyc1485 {
		*v = yyv1485
	}
}
